<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sql_server</title>
      <link href="/posts/a05ad984.html"/>
      <url>/posts/a05ad984.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h2><h3 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h3><p><strong>SQL</strong>：结构化查询语言</p><p><strong>数据</strong>：对客观事物的符号表示</p><p><strong>DB数据库</strong>：数据的集合，存在于计算机内；具有较小的冗余度，较高的数据独立性和易扩展性</p><p><strong>DBMS数据库管理系统</strong>：位于应用程序和存储数据之间的数据管理软件，科学的组织和存储数据，高效的获取和处理数据</p><ul><li><p>定义功能：DDL（增删改）</p></li><li><p>操作功能：DML（查找更新）</p></li><li><p>保护功能：数据恢复，并发控制，完整性控制和安全性控制</p></li><li><p>维护功能：数据导入，转换，存储，数据库性能监控</p><p>时下流行的DBMS：oracle，mysql，sql_server2008</p></li></ul><p><strong>DBS数据库系统</strong>:数据库，数据库管理系统（及其开发工具），应用系统，数据库管理员和用户组成</p><p><strong>DBS发展三阶段</strong>：网状（图），层次（树），关系（二维表）</p><p><strong>信息和数据</strong>：信息指的是数据加工处理后获得的有用的信息，信息是以某种数据形式表现出来的</p><p><strong>信息的三种世界</strong>：</p><ul><li><p>现实世界：人脑之外客观世界</p></li><li><p>信息世界：现实世界在脑子中的反应</p></li><li><p>数据世界：信息世界中的信息数据化后对应的产物，存储在计算机中</p></li></ul><p><strong>实体—联系模型</strong></p><p>实体的联系有3种：1对1，1对多，多对多</p><p><strong>关系模型</strong>：就是指一个二维表；元组就是指的是一行数据；列指的是属性；属性的取值范围被称为域；关键字：唯一确定数组的属性或者是属性集合。</p><p><strong>关系模式</strong>：关系名（属性名1，属性名2……）</p><p><strong>关系运算</strong>：选择投影和连接</p><p>选择：筛选出给定条件的元组（行操作）</p><p>投影：选择指定的属性（列操作）</p><p>连接：从笛卡尔积中筛选出数据</p><p><strong>关系的完整性约束</strong></p><ul><li><p>实体完整性：主关系值（key）不能取空</p></li><li><p>参照完整性：属性s在A表为主键，B表为外键，如果B表中添加元组，不许保证s的值在A表中能够取到</p></li><li><p>域完整性：限制了某些属性中出现的取值范围</p></li></ul><p><strong>关系模型的规范化</strong></p><p>目的：消除存储异常，减少数据冗余，保证数据的完整性和存储效率，一般规范为3NF</p><ul><li><p>1nf：无重复的列</p></li><li><p>2nf：1基础上，每一个非主键字段完全依赖主键（通过主键可以查找到所有的非主键字段）</p></li><li><p>3nf：2基础上，非主键字段不存在依赖关系</p></li></ul><p>解释3nf：比方说一个部门信息表：部门编号，名称，简介，那么在员工信息表中，如果有了部门编号，那么不能有名称，简介。因为显然员工的编号是主键，编号名称简介三者是非主键，不能存在依赖关系</p><p><strong>E—R图</strong></p><p>描述属性之间的联系：矩形实体，椭圆属性，菱形联系</p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>数据库三个文件：数据文件.mdf;辅助数据文件.ndf;日志文件.ldf</p><p>sql语言操作数据库ddl：</p><pre class="line-numbers language-sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建表格"><a href="#创建表格" class="headerlink" title="创建表格"></a>创建表格</h3><p><strong>数据类型</strong>：bigint（8字节）int smallint  tinyint bit（位类型）money float datetime  char（n）varchar（n，节省空间）</p><p>创建一个表，考虑数据类型，列数以及哪些列可以为空值，以及修改表格的操作</p><pre class="line-numbers language-sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="T-SQL语言"><a href="#T-SQL语言" class="headerlink" title="T_SQL语言"></a>T_SQL语言</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>销售管理系统实例</title>
      <link href="/posts/c1a073f0.html"/>
      <url>/posts/c1a073f0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、项目配置"><a href="#1、项目配置" class="headerlink" title="1、项目配置"></a>1、项目配置</h2><p>创建项目</p><p>添加预处理_CRT_SECURE_NO_WARNINGS</p><p>窗口简单的处理框架中的crete函数中修改</p><pre><code>//设置图标，IDI_ICON_WIN为图标资源ID，此为WINAPI函数    SetClassLong(m_hWnd, GCL_HICON, (LONG)AfxGetApp()-&gt;LoadIconW(IDI_ICON_RE));    //参数分别是主窗口句柄，修改图标，素材    //设置标题_右侧    SetTitle(TEXT("2021.2.3"));    //注意左侧标题在doc类中进行修改    //修改窗口大小    MoveWindow(0, 0, 800, 500);    CenterWindow();</code></pre><h2 id="2、静态拆分窗口"><a href="#2、静态拆分窗口" class="headerlink" title="2、静态拆分窗口"></a>2、静态拆分窗口</h2><pre><code>拆分窗口对象：private:    CSplitterWnd m_spliter; // 切分窗口类对象创建静态拆分：这个是对函数的一个重写OOL CMainFrame::OnCreateClient(LPCREATESTRUCT lpcs, CCreateContext* pContext){    // TODO:  在此添加专用代码和/或调用基类    //return CFrameWnd::OnCreateClient(lpcs, pContext);    m_spliter.CreateStatic(this, 1, 2);//拆成一行两列    m_spliter.CreateView(0, 0, RUNTIME_CLASS(CSelectView), CSize(200, 500),pContext);    m_spliter.CreateView(0, 1, RUNTIME_CLASS(CDispalyView), CSize(600, 500), pContext);    //上两个类是单独创建的，基类分别继承Ctreeview和CFromview    return TRUE;}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mfc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对话框</title>
      <link href="/posts/9ca8027.html"/>
      <url>/posts/9ca8027.html</url>
      
        <content type="html"><![CDATA[<h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> CdialogDlg<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">OnBnClickedButton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO:  在此添加控件通知处理程序代码</span>    <span class="token comment" spellcheck="true">//点击弹出模态对话框</span>    CDlgexec dlg<span class="token punctuation">;</span>    dlg<span class="token punctuation">.</span><span class="token function">DoModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不会一闪而过</span><span class="token punctuation">}</span><span class="token keyword">void</span> CdialogDlg<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">OnBnClickedButton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO:  在此添加控件通知处理程序代码</span>    <span class="token comment" spellcheck="true">//弹出非模态对话框</span>    <span class="token comment" spellcheck="true">//CDlgshow dlg;//这种方法创建在栈上，因此一闪而过了,保存到成员属性中</span>    <span class="token comment" spellcheck="true">//dlg.Create(IDD_SHOW);//非模态对话框，这个不允许创建多次，最好的方法是放在构造中进行初始化，放在上一个对话框的初始化列表中</span>    dlg<span class="token punctuation">.</span><span class="token function">CenterWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dlg<span class="token punctuation">.</span><span class="token function">ShowWindow</span><span class="token punctuation">(</span>SW_SHOWNORMAL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Cstatictext控件"><a href="#Cstatictext控件" class="headerlink" title="Cstatictext控件"></a>Cstatictext控件</h2><p>代码中使用框架需要添加变量，前提是将id修改</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> CstatictextDlg<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">OnBnClickedButton3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO:  在此添加控件通知处理程序代码</span>    <span class="token comment" spellcheck="true">//设置为文本呵呵</span>    m_text<span class="token punctuation">.</span><span class="token function">SetWindowTextW</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"呵呵"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CstatictextDlg<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">OnBnClickedButton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO:  在此添加控件通知处理程序代码</span>    CString str<span class="token punctuation">;</span>    m_text<span class="token punctuation">.</span><span class="token function">GetWindowTextW</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MessageBox</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//添加图片，直接添加到init初始化函数中就可以了</span>m_jpg<span class="token punctuation">.</span><span class="token function">ModifyStyle</span><span class="token punctuation">(</span><span class="token number">0xf</span><span class="token punctuation">,</span> SS_BITMAP <span class="token operator">|</span> SS_CENTERIMAGE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置图片风格</span>    <span class="token comment" spellcheck="true">//通过路径获取bitmap句柄</span><span class="token macro property">#<span class="token directive keyword">define</span> HBMP(filepath,width,height) (HBITMAP)LoadImage(AfxGetInstanceHandle(),filepath,IMAGE_BITMAP,width,height,LR_LOADFROMFILE|LR_CREATEDIBSECTION)</span>    CRect rect<span class="token punctuation">;</span>    m_jpg<span class="token punctuation">.</span><span class="token function">GetWindowRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态控件设置bitmap</span>    m_jpg<span class="token punctuation">.</span><span class="token function">SetBitmap</span><span class="token punctuation">(</span><span class="token function">HBMP</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"./1.bmp"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rect<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rect<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取按钮上的内容，同样的方法，也是添加变量</span><span class="token keyword">void</span> CstatictextDlg<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">OnBnClickedButton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO:  在此添加控件通知处理程序代码</span>    CString str<span class="token punctuation">;</span>    m_btn<span class="token punctuation">.</span><span class="token function">GetWindowTextW</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MessageBox</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_btn<span class="token punctuation">.</span><span class="token function">SetWindowTextW</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"happy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//禁用按钮</span>    m_btn<span class="token punctuation">.</span><span class="token function">EnableWindow</span><span class="token punctuation">(</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Ceditcontrl控件"><a href="#Ceditcontrl控件" class="headerlink" title="Ceditcontrl控件"></a>Ceditcontrl控件</h2><ul><li><p>如果要多行，需要将multiline设置成true，want return设置成true</p></li><li><p>纵向无法无线输入，修改auto vscroll为true</p></li><li><p>vertical scroll设置为true，添加滚条</p></li><li><p>关于一行按回车直接退出的解决方法：回车默认执行onok，因此重新写onok，将代码注释掉就可以了</p></li></ul><pre><code>//第一个按钮的作用，复制//第二个按钮的作用退出//注意一个内容edit按钮的初始化在上一层对话框中的初始化void CeditctrlDlg::OnBnClickedButton1(){    // TODO:  在此添加控件通知处理程序代码    CString str;    m_edit1.GetWindowTextW(str);    m_edit2.SetWindowTextW(str);}void CeditctrlDlg::OnBnClickedButton2(){    // TODO:  在此添加控件通知处理程序代码    //exit(0);退出整个程序的方法    //CDialogEx::OnOK();//确认的方式退出    CDialogEx::OnCancel();//取消的方式退出}//一个按钮修改edit中的内容，一个获取其中的内容</code></pre><h2 id="Ccomboxtrl控件"><a href="#Ccomboxtrl控件" class="headerlink" title="Ccomboxtrl控件"></a>Ccomboxtrl控件</h2><p>type中选择drop list将不可以编辑，默认排序中属性sort</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//对下拉框添加数据</span>    m_cbx<span class="token punctuation">.</span><span class="token function">AddString</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"唐僧"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_cbx<span class="token punctuation">.</span><span class="token function">AddString</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_cbx<span class="token punctuation">.</span><span class="token function">AddString</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"猪八戒"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_cbx<span class="token punctuation">.</span><span class="token function">AddString</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"沙僧"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_cbx<span class="token punctuation">.</span><span class="token function">SetCurSel</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置默认值</span>    <span class="token comment" spellcheck="true">//开除位置</span>    m_cbx<span class="token punctuation">.</span><span class="token function">DeleteString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加</span>    m_cbx<span class="token punctuation">.</span><span class="token function">InsertString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"白龙马"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据索引查内容</span>    <span class="token comment" spellcheck="true">/*CString str;    m_cbx.GetLBText(2, str);    MessageBox(str);*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//消息机制函数</span><span class="token keyword">void</span> Ccombox控件Dlg<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">OnCbnSelchangeCombo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO:  在此添加控件通知处理程序代码</span>    <span class="token comment" spellcheck="true">//获取到当前索引</span>    <span class="token keyword">int</span> index<span class="token operator">=</span>m_cbx<span class="token punctuation">.</span><span class="token function">GetCurSel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CString str<span class="token punctuation">;</span>    m_cbx<span class="token punctuation">.</span><span class="token function">GetLBText</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MessageBox</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Clistcontrl控件"><a href="#Clistcontrl控件" class="headerlink" title="Clistcontrl控件"></a>Clistcontrl控件</h2><p>属性view中确定list的格式,选择report</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//list控件进行初始化操作</span>    CString str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"性别"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"年龄"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_list<span class="token punctuation">.</span><span class="token function">InsertColumn</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> LVCFMT_CENTER<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置正文，依然从0开始</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        CString name<span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"张三_%d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        m_list<span class="token punctuation">.</span><span class="token function">InsertItem</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        m_list<span class="token punctuation">.</span><span class="token function">SetItemText</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">++</span>j<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_list<span class="token punctuation">.</span><span class="token function">SetItemText</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">++</span>j<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"19"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如何设置整行选中</span>    m_list<span class="token punctuation">.</span><span class="token function">SetExtendedStyle</span><span class="token punctuation">(</span>m_list<span class="token punctuation">.</span><span class="token function">GetExtendedStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> LVS_EX_FULLROWSELECT <span class="token operator">|</span> LVS_EX_GRIDLINES<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Ctreectrl控件"><a href="#Ctreectrl控件" class="headerlink" title="Ctreectrl控件"></a>Ctreectrl控件</h2><p>有线：has lines  按钮：has button  根节点之间有线：lines at root</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//tree使用</span>    <span class="token comment" spellcheck="true">//1、设置资源</span>    HICON icon<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    icon<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">AfxGetApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">LoadIconW</span><span class="token punctuation">(</span>IDI_ICON1<span class="token punctuation">)</span><span class="token punctuation">;</span>    icon<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">AfxGetApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">LoadIconW</span><span class="token punctuation">(</span>IDI_ICON2<span class="token punctuation">)</span><span class="token punctuation">;</span>    icon<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">AfxGetApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">LoadIconW</span><span class="token punctuation">(</span>IDI_ICON3<span class="token punctuation">)</span><span class="token punctuation">;</span>    icon<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">AfxGetApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">LoadIconW</span><span class="token punctuation">(</span>IDI_ICON4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//CImageList list;//准备图标集合</span>    list<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> ILC_COLOR32<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加载图片</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>icon<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    m_tree<span class="token punctuation">.</span><span class="token function">SetImageList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span>TVSIL_NORMAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2、设置节点</span>    HTREEITEM root<span class="token operator">=</span>m_tree<span class="token punctuation">.</span><span class="token function">InsertItem</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"根节点"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HTREEITEM parent<span class="token operator">=</span>m_tree<span class="token punctuation">.</span><span class="token function">InsertItem</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"父节点"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    HTREEITEM sub1<span class="token operator">=</span>m_tree<span class="token punctuation">.</span><span class="token function">InsertItem</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"子节点1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    HTREEITEM sub2<span class="token operator">=</span>m_tree<span class="token punctuation">.</span><span class="token function">InsertItem</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"子节点2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置默认选中子节点</span>    m_tree<span class="token punctuation">.</span><span class="token function">SelectItem</span><span class="token punctuation">(</span>sub1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//做消息机制</span><span class="token keyword">void</span> CCtreectrlDlg<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">OnTvnSelchangedTree1</span><span class="token punctuation">(</span>NMHDR <span class="token operator">*</span>pNMHDR<span class="token punctuation">,</span> LRESULT <span class="token operator">*</span>pResult<span class="token punctuation">)</span><span class="token punctuation">{</span>    LPNMTREEVIEW pNMTreeView <span class="token operator">=</span> reinterpret_cast<span class="token operator">&lt;</span>LPNMTREEVIEW<span class="token operator">></span><span class="token punctuation">(</span>pNMHDR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// TODO:  在此添加控件通知处理程序代码</span>    <span class="token comment" spellcheck="true">//获取当前选中节点的行item</span>    HTREEITEM item<span class="token operator">=</span>m_tree<span class="token punctuation">.</span><span class="token function">GetSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据行获取内容</span>    CString str<span class="token operator">=</span>m_tree<span class="token punctuation">.</span><span class="token function">GetItemText</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MessageBox</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>pResult <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CTagtrl控件"><a href="#CTagtrl控件" class="headerlink" title="CTagtrl控件"></a>CTagtrl控件</h2><p>对话框如果不想要边框，可以选择border：none,style中选择以子窗口方式打开：child</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">// TODO:  在此添加额外的初始化代码</span>    <span class="token comment" spellcheck="true">//将对话框添加到tag控件上面</span>    m_tab<span class="token punctuation">.</span><span class="token function">AddPage</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"系统消息"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>lg1<span class="token punctuation">,</span> IDD_DIALOG1<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_tab<span class="token punctuation">.</span><span class="token function">AddPage</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"系统管理"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>lg2<span class="token punctuation">,</span> IDD_DIALOG2<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_tab<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mfc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first mfc</title>
      <link href="/posts/fbe6a4fc.html"/>
      <url>/posts/fbe6a4fc.html</url>
      
        <content type="html"><![CDATA[<h2 id="利用底层创建窗口"><a href="#利用底层创建窗口" class="headerlink" title="利用底层创建窗口"></a>利用底层创建窗口</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token comment" spellcheck="true">//WINAPI代表——stdcall参数从右往左依次入栈，并在函数返回前自动清空</span><span class="token comment" spellcheck="true">//6、处理消息（窗口过程）</span><span class="token comment" spellcheck="true">//CALLBACK代表——stdcall参数从右往左依次入栈，并在函数返回前自动清空</span>LRESULT CALLBACK <span class="token function">WindowProc</span><span class="token punctuation">(</span>HWND hwnd<span class="token punctuation">,</span> UINT uMsg<span class="token punctuation">,</span> WPARAM wParam<span class="token punctuation">,</span> LPARAM lParam<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>uMsg<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> WM_CLOSE<span class="token punctuation">:</span>        <span class="token function">DestroyWindow</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//触发WM_DESTORY消息</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> WM_DESTROY<span class="token punctuation">:</span>        <span class="token function">PostQuitMessage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> WM_LBUTTONDOWN<span class="token punctuation">:</span>    <span class="token punctuation">{</span>                            <span class="token keyword">int</span> xpos<span class="token punctuation">;</span>                            <span class="token keyword">int</span> ypos<span class="token punctuation">;</span>                            xpos <span class="token operator">=</span> <span class="token function">LOWORD</span><span class="token punctuation">(</span>lParam<span class="token punctuation">)</span><span class="token punctuation">;</span>                            ypos <span class="token operator">=</span> <span class="token function">HIWORD</span><span class="token punctuation">(</span>wParam<span class="token punctuation">)</span><span class="token punctuation">;</span>                            TCHAR buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                            <span class="token function">wsprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"x=%d,y=%d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xpos<span class="token punctuation">,</span> ypos<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">MessageBox</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"鼠标按下"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//窗口，字符，标题，按键类型</span>    <span class="token punctuation">}</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> WM_KEYDOWN<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>键盘的事件        <span class="token function">MessageBox</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"键盘按下"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"键盘消息"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> WM_PAINT<span class="token punctuation">:</span>    <span class="token punctuation">{</span>                     PAINTSTRUCT ps<span class="token punctuation">;</span>                     HDC hdc <span class="token operator">=</span> <span class="token function">BeginPaint</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token function">TextOut</span><span class="token punctuation">(</span>hdc<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token function">EndPaint</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">DefWindowProc</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> uMsg<span class="token punctuation">,</span> wParam<span class="token punctuation">,</span> lParam<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> WINAPI <span class="token function">WinMain</span><span class="token punctuation">(</span>__in HINSTANCE hInstance<span class="token punctuation">,</span> __in_opt HINSTANCE hPrevInstance<span class="token punctuation">,</span> __in LPSTR lpCmdLine<span class="token punctuation">,</span> __in <span class="token keyword">int</span> nShowCmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//应用程序实例句柄，前一个应用程序实例句柄，为null，char*argv参数数组，显示风格</span>    <span class="token comment" spellcheck="true">//实现底层窗口：</span>    <span class="token comment" spellcheck="true">//1、设计窗口类</span>    WNDCLASS wc<span class="token punctuation">;</span>    wc<span class="token punctuation">.</span>cbClsExtra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类额外的内存，通常为0</span>    wc<span class="token punctuation">.</span>cbWndExtra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//窗口额外的内存，通常为0</span>    wc<span class="token punctuation">.</span>hbrBackground <span class="token operator">=</span> <span class="token punctuation">(</span>HBRUSH<span class="token punctuation">)</span><span class="token function">GetStockObject</span><span class="token punctuation">(</span>WHITE_BRUSH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//背景</span>    wc<span class="token punctuation">.</span>hCursor <span class="token operator">=</span> <span class="token function">LoadCursor</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> IDC_HAND<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//光标</span>    wc<span class="token punctuation">.</span>hIcon <span class="token operator">=</span> <span class="token function">LoadIcon</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> IDI_WARNING<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//图标</span>    wc<span class="token punctuation">.</span>hInstance <span class="token operator">=</span> hInstance<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前的实例句柄</span>    wc<span class="token punctuation">.</span>lpfnWndProc <span class="token operator">=</span> WindowProc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//窗口过程函数，回调函数</span>    wc<span class="token punctuation">.</span>lpszClassName <span class="token operator">=</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"WFP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定窗口类名称</span>    wc<span class="token punctuation">.</span>lpszMenuName <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//菜单名</span>    wc<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//代表默认风格</span>    <span class="token comment" spellcheck="true">//2注册窗口类</span>    <span class="token function">RegisterClass</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3、创建窗口类</span>    HWND hwnd <span class="token operator">=</span> <span class="token function">CreateWindow</span><span class="token punctuation">(</span>wc<span class="token punctuation">.</span>lpszClassName<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"WFP"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> WS_OVERLAPPEDWINDOW<span class="token punctuation">,</span> CW_USEDEFAULT<span class="token punctuation">,</span> CW_USEDEFAULT<span class="token punctuation">,</span> CW_USEDEFAULT<span class="token punctuation">,</span> CW_USEDEFAULT<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> hInstance<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//参数：lpClassName, lpWindowName, dwStyle, x, y,nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam</span>    <span class="token comment" spellcheck="true">//4、显示和更新窗口</span>    <span class="token function">ShowWindow</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> SW_SHOWNA<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">UpdateWindow</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//5、通过循环取消息</span>    MSG msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//HWND        hwnd;主窗口</span>    <span class="token comment" spellcheck="true">//UINT        message;消息名称</span>    <span class="token comment" spellcheck="true">//WPARAM      wParam;附件消息，键盘</span>    <span class="token comment" spellcheck="true">//LPARAM      lParam;附加消息，鼠标</span>    <span class="token comment" spellcheck="true">//DWORD       time;消息产生时间</span>    <span class="token comment" spellcheck="true">//POINT       pt;鼠标消息 x y 坐标</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*        GetMessageW(        __out LPMSG lpMsg,消息结构体        __in_opt HWND hWnd,捕获所有窗口消息null        __in UINT wMsgFilterMin,//二者为0，所有消息都会捕获        __in UINT wMsgFilterMax);        */</span>        <span class="token comment" spellcheck="true">//翻译消息，类似于ctrl c这种复制类，需要进行翻译</span>        <span class="token comment" spellcheck="true">//分发消息</span>        <span class="token function">DispatchMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MFC实现空窗口"><a href="#MFC实现空窗口" class="headerlink" title="MFC实现空窗口"></a>MFC实现空窗口</h2><pre class="line-numbers language-c++"><code class="language-c++">#include<afxwin.h>class Myapp:public CWinApp//继承应用程序类{public:    //程序入口    virtual BOOL InitInstance();};class Myframe :public CFrameWnd{public:    Myframe();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include "mfc.h"Myapp app;BOOL Myapp::InitInstance(){    //创建窗口    Myframe*frame = new Myframe;    //显示和更新    frame->ShowWindow(SW_SHOWNORMAL);    frame->UpdateWindow();    m_pMainWnd = frame;//保存指向应用程序的主窗口的指针    return TRUE;}Myframe::Myframe(){    Create(NULL, TEXT("WFP"));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MFC消息映射机制"><a href="#MFC消息映射机制" class="headerlink" title="MFC消息映射机制"></a>MFC消息映射机制</h2><p>将消息与成员函数相互关联，将一个消息映射到类中所需要做的全部工作：</p><ul><li><p>所操作类中，声明消息映射宏，写在.h中</p></li><li><p>通过放置标识消息的宏来执行消息映射，放到分界宏之间</p><pre class="line-numbers language-c++"><code class="language-c++">//在cpp文件中写宏BEGIN_MESSAGE_MAP(Myframe, CFrameWnd)    ON_WM_LBUTTONDOWN()//鼠标左键按下的宏    ON_WM_CHAR()    ON_WM_PAINT()END_MESSAGE_MAP()//在.h中声明映射函数并重写DECLARE_MESSAGE_MAP();//声明宏，必须写的    afx_msg void OnLButtonDown(UINT, CPoint);//鼠标左键的按下声明    afx_msg void OnChar(UINT, UINT, UINT);//键盘函数声明    afx_msg void OnPaint();//画图void Myframe::OnLButtonDown(UINT, CPoint point)//鼠标左键的按下实现{    //TCHAR buf[1024];    //wsprintf(buf, TEXT("x=%d,y=%d"), point.x, point.y);    //MessageBox(buf);    CString str;    str.Format(TEXT(" x=%d,y=%d"), point.x, point.y);    MessageBox(str);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>  }</p><p>  void Myframe::OnChar(UINT key, UINT, UINT)<br>  {<br>      CString str;<br>      str.Format(TEXT(“按下了%c”),key);<br>      MessageBox(str);<br>  }</p><p>  void Myframe::OnPaint()<br>  {<br>      CPaintDC dc(this);<br>      dc.TextOutW(100, 100, TEXT(“为了联盟”));<br>      dc.Ellipse(200, 200, 300, 400);<br>  }</p><pre><code>  ## windows字符集```c//ANSI一个字符对应一个字节，多字节 //中文无法搞定，出现宽字节编码格式，一个字符对应多个字节Unicode编码格式//我们默认用的都是宽字节，如何将多字节转换成宽字节MessageBox(L"王凤鹏");//加L能够将多字节转换成宽字节//加个大写L，就认为后面是一个宽字节的字符串，另外的方法就是text做一个自动识别//MessageBox(TEXT("王凤鹏"));wchar_t*p = L"bbb";int n = wcslen(p);//统计宽字节长度的方法//Cstring 与char*之间相互转换char*p1 = "aaa";CString str = CString(p1);CString str1 = TEXT("AAAA");CStringA tmp = str1;char*p2 = tmp.GetBuffer();//注意咯，默认的messagebox中放的一定是cstring类型，即TEXT，根据你设置的编码类型来确定</code></pre><h2 id="MFC的向导创建"><a href="#MFC的向导创建" class="headerlink" title="MFC的向导创建"></a>MFC的向导创建</h2><p>VC++的mfc程序创建方法</p><p>消息机制的添加方法</p><p>frame只属于框架，类似标题啥的才出现在框架frame中，而出现的效果写在应该写在view的类中，即数据的显示和修改由视图类完成</p><p>数据的存储和加载有文档类来完成</p><p>ondraw与onpaint是两个消息机制，一般用ondraw</p><p>ex为扩展函数；afx开头为全局函数</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> -不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mfc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021.2.1</title>
      <link href="/posts/e281f94e.html"/>
      <url>/posts/e281f94e.html</url>
      
        <content type="html"><![CDATA[<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>9：30——10：00：修改公司项目风险报告</p><p>10：00——11：40mfc学习</p><ul><li><p>windows基本名词的一些解析对应视频26min</p></li><li><p>底层窗口设计，对应视频34min</p></li></ul><p>14：00——16：00继续底层窗口的处理过程，视频27min</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> -不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/posts/f6491cfb.html"/>
      <url>/posts/f6491cfb.html</url>
      
        <content type="html"><![CDATA[<h2 id="socket编程"><a href="#socket编程" class="headerlink" title="socket编程"></a>socket编程</h2><h3 id="1、socket概念"><a href="#1、socket概念" class="headerlink" title="1、socket概念"></a>1、socket概念</h3><p>什么是socket？封装了传输层的协议（tcp、udp），是网络通信的函数接口</p><p>套接字主要内容：ip+port</p><h3 id="2、网络字节序"><a href="#2、网络字节序" class="headerlink" title="2、网络字节序"></a>2、网络字节序</h3><p>网络字节序采用大端法的存储方式，而主机的字节序通常是采用小端法的存储方式。利用下面函数进行转换：</p><pre><code>#include&lt;arpa/inet.h&gt;//主机字节——&gt;网络字节unit16_t htons(unit16_t hostshort)//端口unit32_t htonl(unit16_t hostlong)//ip//网络字节--&gt;主机字节unit16_t ntons(unit16_t netshort)unit32_t ntohl(unit32_t netlong)</code></pre><h3 id="3、ip地址转换函数"><a href="#3、ip地址转换函数" class="headerlink" title="3、ip地址转换函数"></a>3、ip地址转换函数</h3><pre><code>int inet_pton(int af,const char*src,void*dst)//本地ip转换成网络字节const* inet_ntop(int af,const void*src,char*dst,socklen_t size)//网络字节转本地ip</code></pre><h3 id="4、sockaddr-数据结构"><a href="#4、sockaddr-数据结构" class="headerlink" title="4、sockaddr 数据结构"></a>4、sockaddr 数据结构</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sockaddr<span class="token punctuation">{</span>    sa_family_t sa_family<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//16位地址类型，AF_XXX</span>    <span class="token keyword">char</span> sa_data<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//14字节地址数据</span><span class="token punctuation">}</span><span class="token keyword">struct</span> sockaddr_in <span class="token punctuation">{</span>    <span class="token keyword">short</span>            sin_family<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 2 bytes e.g. AF_INET, AF_INET6</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span>   sin_port<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2 bytes e.g. htons(3490)</span>    <span class="token keyword">struct</span> in_addr   sin_addr<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 4 bytes see struct in_addr, below</span>    <span class="token keyword">char</span>             sin_zero<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 8 bytes zero this if you want to</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> in_addr<span class="token punctuation">{</span>    _be32 s_addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、网络套接字函数"><a href="#5、网络套接字函数" class="headerlink" title="5、网络套接字函数"></a>5、网络套接字函数</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span>          </span><span class="token comment" spellcheck="true">/* See NOTES */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span>    <span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//domain:protocol  family</span>    <span class="token comment" spellcheck="true">//type:tcp or udp</span>    <span class="token comment" spellcheck="true">//protocol -0</span>    <span class="token comment" spellcheck="true">//return 文件描述符（套接字）</span>    <span class="token keyword">int</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>addr<span class="token punctuation">,</span>socklen_t addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将建立出来的套接字与本地的ip和port连接</span>    <span class="token comment" spellcheck="true">//sockfd——创建出的文件描述符</span>    <span class="token comment" spellcheck="true">//addr——ip和port</span>    <span class="token comment" spellcheck="true">//addrlen长度</span>    <span class="token keyword">int</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//同时连接到服务器的客户端的数目，backlog的max为128</span>    <span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span>addr<span class="token punctuation">,</span>socklen_t<span class="token operator">*</span>addlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//阻塞等待客户端的连接请求</span>    <span class="token keyword">int</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> sockaddr<span class="token operator">*</span>addr<span class="token punctuation">,</span>socklen_t<span class="token operator">*</span>addlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//连接服务器，输入的sockaddr是服务器的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TCP通信"><a href="#TCP通信" class="headerlink" title="TCP通信"></a>TCP通信</h2><h3 id="1、TCP-server"><a href="#1、TCP-server" class="headerlink" title="1、TCP_server"></a>1、TCP_server</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建监听的套接字</span>    <span class="token keyword">int</span> lfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// lfd 和本地的IP port绑定</span>    <span class="token keyword">struct</span> sockaddr_in server<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>server<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 地址族协议 - ipv4</span>    server<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>server<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"bind error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置监听</span>    ret <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"listen error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 等待并接收连接请求</span>    <span class="token keyword">struct</span> sockaddr_in client<span class="token punctuation">;</span>    socklen_t len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"accept error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" accept successful !!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 一直通信</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先接收数据</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"read error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 客户端已经断开了连接 \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">close</span><span class="token punctuation">(</span>cfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv buf: %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 转换 - 小写 - 大写</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"send buf: %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">write</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>lfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、TCP-client"><a href="#2、TCP-client" class="headerlink" title="2、TCP_client"></a>2、TCP_client</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token comment" spellcheck="true">// tcp client</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建套接字</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 连接服务器</span>    <span class="token keyword">struct</span> sockaddr_in serv_addr<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>serv_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将字符串转换成int类型</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"connect error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 通信</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 写数据</span>        <span class="token comment" spellcheck="true">// 接收键盘输入</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发送给服务器</span>        <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 接收服务器端的数据</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read buf = %s, len = %d\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、TCP连接与释放"><a href="#3、TCP连接与释放" class="headerlink" title="3、TCP连接与释放"></a>3、TCP连接与释放</h3><p>tcp三次握手连接</p><ol><li><p>client向server发送请求数据，SYN设置为1，seq为x</p></li><li><p>server收到数据进行回发确认数据，seq为y，ack为x+1</p></li><li><p>client发送携带数据的信息，seq为x+1，ack为y+1</p></li></ol><p>tcp四次握手释放</p><ol><li><p>A想要断开连接，直接FIN设置为1,发送请求包给B</p></li><li><p>B发送确认包，这个时候B仍然可以发送数据</p></li><li><p>B想要断开连接，向A发送请求数据，FIN为1</p></li><li><p>A发送确认数据包，二者彻底断开</p></li></ol><h3 id="4、TCP滑动窗口与流量控制"><a href="#4、TCP滑动窗口与流量控制" class="headerlink" title="4、TCP滑动窗口与流量控制"></a>4、TCP滑动窗口与流量控制</h3><p>在tcp头中有发送窗口的选项，代表着缓存的剩余量，发送端发送数据不能超过这个值</p><p>其次，关于流量控制，滑动窗口的机制像是发送端一次性发送好多个，接收端一个一个接受，发送了确认号，就代表前面的已经全部接受完毕。如果出现数据包未达，接收端会选择丢弃后面的所有包，只要应当接收的包。重发：当超时或者连续收到三个相同ACK确认号，就明白了，这玩意丢了，得重发</p><h3 id="5、TCP多进程并发服务器"><a href="#5、TCP多进程并发服务器" class="headerlink" title="5、TCP多进程并发服务器"></a>5、TCP多进程并发服务器</h3><p>使用duo’jin</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程守护</title>
      <link href="/posts/71516a01.html"/>
      <url>/posts/71516a01.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2021.1.22</title>
      <link href="/posts/b2cbaf4e.html"/>
      <url>/posts/b2cbaf4e.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/posts/c517589e.html"/>
      <url>/posts/c517589e.html</url>
      
        <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h2 id="问题引入："><a href="#问题引入：" class="headerlink" title="问题引入："></a>问题引入：</h2><pre><code>题目背景若某个家族人员过于庞大，要判断两个是否是亲戚，确实还很不容易，现在给出某个亲戚关系图，求任意给出的两个人是否具有亲戚关系。题目描述规定：x和y是亲戚，y和z是亲戚，那么x和z也是亲戚。如果x,y是亲戚，那么x的亲戚都是y的亲戚，y的亲戚也都是x的亲戚。输入格式第一行：三个整数n,m,p，（n&lt;=5000,m&lt;=5000,p&lt;=5000），分别表示有n个人，m个亲戚关系，询问p对亲戚关系。以下m行：每行两个数Mi，Mj，1&lt;=Mi，Mj&lt;=N，表示Mi和Mj具有亲戚关系。接下来p行：每行两个数Pi，Pj，询问Pi和Pj是否具有亲戚关系。输出格式P行，每行一个’Yes’或’No’。表示第i个询问的答案为“具有”或“不具有”亲戚关系。</code></pre><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 5005</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> rank<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">==</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">?</span> x <span class="token punctuation">:</span> <span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//find函数的作用就是将查找的x的fa[x]一步到位，从而减少复杂度</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rank<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>        fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token keyword">else</span>        fa<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> rank<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!=</span> y<span class="token punctuation">)</span>        rank<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">merge</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"Yes"</span> <span class="token punctuation">:</span> <span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[]: <a href="https://zhuanlan.zhihu.com/p/93647900" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/93647900</a>    “文章转载知乎”</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode1489</title>
      <link href="/posts/2fcd482f.html"/>
      <url>/posts/2fcd482f.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>给你一个 n 个点的带权无向连通图，节点编号为 0 到 n-1 ，同时还有一个数组 edges ，其中 edges[i] = [fromi, toi, weighti] 表示在 fromi 和 toi 节点之间有一条带权无向边。最小生成树 (MST) 是给定图中边的一个子集，它连接了所有节点且没有环，而且这些边的权值和最小。请你找到给定图中最小生成树的所有关键边和伪关键边。如果从图中删去某条边，会导致最小生成树的权值和增加，那么我们就说它是一条关键边。伪关键边则是可能会出现在某些最小生成树中但不会出现在所有最小生成树中的边。请注意，你可以分别以任意顺序返回关键边的下标和伪关键边的下标。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><h2 id="个人想法"><a href="#个人想法" class="headerlink" title="个人想法"></a>个人想法</h2><p>这个题图的最小生成树，两种方法prime和kruskal。这两种方法都采用了贪心的方法。prime类似与dijkstra，选点，寻找点外集合与点内集合的min，不断添加；Kruskal算法是选边，如果形成回路就不选这个，显然这个题用这个方法更好，我每次取edges[]中的最小值，只要满足不是回路条件就可以选进来，选n-1个边最后就可以了。难点在于判断回路。这个现在觉得也好处理了 。这里我设置出来一个vector，来把点放进去，如果一个边的两个点都在，那么这个边就排除。这个题，我可以利用python单纯的写出一个kruskal算法来入门。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021.1.21</title>
      <link href="/posts/2bc2fef4.html"/>
      <url>/posts/2bc2fef4.html</url>
      
        <content type="html"><![CDATA[<h2 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h2><ul><li>早上7点到8点出去跑步，未吃早饭</li><li>下午3点进行背部拉伸</li></ul><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ul><li>早上9点-12点，学习了进程通信（之前的笔记丢了，重新写了一遍）</li><li>下午2点-5点半，学习Linux的信号系统，记录笔记</li><li>7点开始把信号部分收尾结束了吧</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode628</title>
      <link href="/posts/fe4b6920.html"/>
      <url>/posts/fe4b6920.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c"><code class="language-c">给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">6</span>示例 <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">24</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个提的思路就是一个快排，考虑到正负的写法，其实只存在两种可能，最后三个，和第1、2两个与最后一个</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>using namespace std<span class="token punctuation">;</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> low <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">int</span> high <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> tmp <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> tmp <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> i<span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quick_sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quick_sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">maximumProduct</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">quick_sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result1 <span class="token operator">=</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result2 <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>result1 <span class="token operator">></span> result2 <span class="token operator">?</span> result1 <span class="token punctuation">:</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础编程</title>
      <link href="/posts/4622db03.html"/>
      <url>/posts/4622db03.html</url>
      
        <content type="html"><![CDATA[<h1 id="python基础编程"><a href="#python基础编程" class="headerlink" title="python基础编程"></a>python基础编程</h1><h2 id="1、数据与变量"><a href="#1、数据与变量" class="headerlink" title="1、数据与变量"></a>1、数据与变量</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello python"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#表示注释</span><span class="token triple-quoted-string string">"""print("hello world")可以进行多行注释"""</span>my_name<span class="token operator">=</span><span class="token string">'黑马程序员'</span>my_school<span class="token operator">=</span><span class="token string">'hit'</span><span class="token comment" spellcheck="true">#可以发现，python的这个字符串竟然是用单引号来表示</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#检查数据类型的方法</span>a<span class="token operator">=</span><span class="token number">1.0</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>b<span class="token operator">=</span><span class="token number">10</span>c<span class="token operator">=</span><span class="token boolean">True</span>d<span class="token operator">=</span><span class="token string">'12345wang'</span><span class="token comment" spellcheck="true">#str</span>e<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#list</span>f<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#tuple</span>g<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#set</span>h<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'tom'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#变量的输出跟c相同的一个点是都是用占位符，另外一种方法是f的使用</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"my age is %d"</span><span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的年龄是{b}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结束符号:python的默认就是\n</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"my name is "</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输入input的用法</span><span class="token comment" spellcheck="true">#password=input('输入密码：')</span><span class="token comment" spellcheck="true">#print(f'mimashi:{password}')</span><span class="token comment" spellcheck="true">#默认情况是把输入的内容当成字符串str，那么久必须用到数据类型的强制转换了</span><span class="token comment" spellcheck="true">#强制转换跟c是一样的，其中有一个万能钥匙eval，自动分析出类型</span><span class="token comment" spellcheck="true">#eval(password)</span><span class="token comment" spellcheck="true">#print(type(eval(password)))</span>A<span class="token operator">=</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">3</span>B<span class="token operator">=</span><span class="token number">5</span><span class="token operator">//</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'A:{A}B:{B}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#//竟然代表是整除</span><span class="token comment" spellcheck="true">#多个变量赋值：</span>o<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#关系运算符&lt;>=!=之类跟c一样，不一样的是逻辑运算符：c中的&amp;&amp; || ！ 分别对应and or not，反而是以前学的布尔运算符</span><span class="token comment" spellcheck="true">#对于字符串而言，单引号双引号三引号都表示字符串，区别是三引号可以换行，单引号的缺陷在于英文中右单引号，可以通过转义来解决</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、基础语句"><a href="#2、基础语句" class="headerlink" title="2、基础语句"></a>2、基础语句</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#if的语法使用，不用（），只用了：</span><span class="token comment" spellcheck="true">#三目运算：</span>aa<span class="token operator">=</span><span class="token number">1</span>bb<span class="token operator">=</span><span class="token number">2</span>cc<span class="token operator">=</span>aa <span class="token keyword">if</span> a<span class="token operator">></span>b <span class="token keyword">else</span> bb<span class="token keyword">print</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#while同if一样，不用括号，直接用：</span><span class="token comment" spellcheck="true">#写一个乘法法则试一试哈</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">while</span> j<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">:</span>    i<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">while</span> i<span class="token operator">&lt;=</span>j<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{i}*{j}={i*j}'</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        i<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    j<span class="token operator">+=</span><span class="token number">1</span><span class="token comment" spellcheck="true">#比较重要的是for循环中的这个in的用法呀</span>str1<span class="token operator">=</span><span class="token string">'abcdef'</span><span class="token keyword">for</span> k <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#else有个好用的用法，针对while和for而言，最后跳出那一下直接搞一个else</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、字符串"><a href="#3、字符串" class="headerlink" title="3、字符串"></a>3、字符串</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#对于字符串而言，单引号双引号三引号都表示字符串，区别是三引号可以换行，单引号的缺陷在于英文中右单引号，可以通过转义来解决</span><span class="token comment" spellcheck="true">#切片：类似于一种查找的方法，首尾步长，不包含结束的下标</span>name<span class="token operator">=</span><span class="token string">'abcdefg'</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#字符串的函数：查找修改判断</span><span class="token comment" spellcheck="true">#查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'bcd'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这个位置后面两个参数是查找的范围，找不到的话返回-1，index()用法与find一样，唯一的区别是找不到报错</span><span class="token comment" spellcheck="true">#print(name.index('eds'))</span><span class="token comment" spellcheck="true">#cout函数用来计数，不存在就是返回0</span><span class="token comment" spellcheck="true">#修改</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'bc'</span><span class="token punctuation">,</span><span class="token string">'ee'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#把bc替换成ee，返回值是修改后的字符串，是重新申请空间，而不是在原有基础上修改</span><span class="token comment" spellcheck="true">#split()是一个分割函数，第一个参数代表分割的依据，第二个参数代表分割符的数目</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>List1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>join<span class="token punctuation">(</span>List1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#直接给合并了呀，不过注意，这个是字符串的函数呢,这个函数和split是互补的呀</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#首字母改成大写</span>verb<span class="token operator">=</span><span class="token string">'i am wfp'</span><span class="token keyword">print</span><span class="token punctuation">(</span>verb<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#每个单词都改成大写</span><span class="token comment" spellcheck="true">#.....str的修改函数还有很多</span><span class="token comment" spellcheck="true">#下面看几个判断的函数吧</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#startswith,endswith这两个可以判断是否以某个字符来结尾</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#isalpha判断是否全部是字母</span><span class="token comment" spellcheck="true">#isdigit判断是否是数字</span><span class="token comment" spellcheck="true">#isalnum判断是否只是字母和数字</span><span class="token comment" spellcheck="true">#isspace判断返回全部是空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、列表与元组"><a href="#4、列表与元组" class="headerlink" title="4、列表与元组"></a>4、列表与元组</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#列表：就像c中的数组是一样的，但是列表里的数据类型是任意的</span><span class="token comment" spellcheck="true">#列表中可以直接查找：.index(数据，起始坐标，结束坐标)，cout来统计数目，跟str是一样的</span><span class="token comment" spellcheck="true">#len函数，统计元素的数目</span>name_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"xiaoming"</span><span class="token punctuation">,</span><span class="token string">"xiaoguang"</span><span class="token punctuation">,</span><span class="token string">"xiaolin"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#利用in来判断存在</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xiaolin'</span><span class="token keyword">in</span> name_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#增加：</span>name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'xiaopeng'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#列表为可变类型，不同于上面的str为不可变类型数据</span><span class="token comment" spellcheck="true">#对于extend，是添加单个字节数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#insert插入</span>name_list<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'xiaohua'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#删除：</span><span class="token comment" spellcheck="true">#del可以删除列表与列表中指定位置数据</span><span class="token keyword">del</span> name_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pop出列表</span>yuansu<span class="token operator">=</span>name_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>yuansu<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#remove移除,这个和del是一样的，都是来删除元素的，不过del根据坐标，remove根据值</span>name_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'xiaolin'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#修改：</span>name_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'A'</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#逆置函数.reverse()直接逆序</span><span class="token comment" spellcheck="true">#排序函数.sort()直接用来给列表来排序</span>shuzu<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>shuzu<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>shuzu<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#复制函数</span>shuzu1<span class="token operator">=</span>shuzu<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> shuzu<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#列表嵌套，不过就是二维数组或者是vector&lt;vector&lt;int>></span>shuzu2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>shuzu2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#元组：元组tuple不同于list的一点在于元组不可修改，相比于list用[],tuple用的是()</span>num<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>num1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#如果不去加这个逗号，是没有办法识别出tuple的</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#元组的index，count，len与list是一模一样的</span><span class="token comment" spellcheck="true">#元组不可以修改，但是元组内嵌套的list列表是可以修改的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、字典与集合"><a href="#5、字典与集合" class="headerlink" title="5、字典与集合"></a>5、字典与集合</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#字典：字典给人的感觉像是一个struct结构体了</span>dict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'wfp'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token string">'19'</span><span class="token punctuation">,</span><span class="token string">'gender'</span><span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span>dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'WFP'</span>dict<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2015011809'</span><span class="token keyword">del</span> dict<span class="token punctuation">[</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#这个del是目前学的唯一的不属于类函数的函数啊</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#可以对字典中的元素进行直接key值查找，这又跟散列表很像了呀，同数组的查找方式</span><span class="token comment" spellcheck="true">#在上面基础上引进了get函数</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#get查不到返回none，如果查不到后面还有个参数，name返回后面这个参数</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'gender'</span><span class="token punctuation">,</span><span class="token string">'man'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#keys函数，直接返回key值,values,返回值</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#itenms把每一项转换成了元组？</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#dict_items([('name', 'WFP'), ('age', '19'), ('id', '2015011809')])</span><span class="token comment" spellcheck="true">#key值和value直接用dict.key()和dict.value()来表示</span><span class="token comment" spellcheck="true">#集合：</span><span class="token comment" spellcheck="true">#创建集合的方法：</span>s1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span>s2<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token string">'abcdef'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#{'a', 'd', 'c', 'f', 'e', 'b'}</span>s3<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#这个并不代表集合，而是代表字典</span><span class="token comment" spellcheck="true">#增加数据</span>s1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#注意好集合是有去重功能的</span>s1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#删除数据</span>s1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pop功能竟然是随机取出元素</span><span class="token comment" spellcheck="true">#in来查找元素</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">in</span> s1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、公共操作"><a href="#6、公共操作" class="headerlink" title="6、公共操作"></a>6、公共操作</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">容器类型</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">合并</td><td align="center">str，list，tuple</td></tr><tr><td align="center">*</td><td align="center">复制</td><td align="center">str，list，tuple</td></tr><tr><td align="center">in</td><td align="center">存在</td><td align="center">str，list，tuple,dic</td></tr><tr><td align="center">not in</td><td align="center">不存在</td><td align="center">str，list，tuple,dic</td></tr></tbody></table><h3 id="公共函数"><a href="#公共函数" class="headerlink" title="公共函数"></a>公共函数</h3><p>len,del,max,min,range(start,end,step)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#enumerate--将下标与值同时输出</span>s1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#(0, '1')(1, '2')(2, '3')</span><span class="token keyword">for</span> i <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s1<span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#(2, '1')(3, '2')(4, '3')(5, '4')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="容器类型转换"><a href="#容器类型转换" class="headerlink" title="容器类型转换"></a>容器类型转换</h3><p>list，tuple，set三者几乎一样，[],(),{},可以强行转换，方法跟C中的数值强制转换是一样的</p><h2 id="7、推导式"><a href="#7、推导式" class="headerlink" title="7、推导式"></a>7、推导式</h2><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><pre class="line-numbers language-python"><code class="language-python">list1<span class="token operator">=</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>list2<span class="token operator">=</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]end那个数式不算的</span><span class="token comment" spellcheck="true">#[0, 2, 4, 6, 8]</span>list3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#[(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#字典推导式</span>dict1<span class="token operator">=</span><span class="token punctuation">{</span>list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>list2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#可以发现跟鞋tuple（）的方法是一样的</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#{0: 0, 1: 2, 2: 4, 3: 6, 4: 8, 5: 10, 6: 12, 7: 14, 8: 16, 9: 18}</span><span class="token comment" spellcheck="true">#提取字典中目标数据</span>counts<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#把abc当成一类反而成了一个序列表了</span>count1<span class="token operator">=</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span>value <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value <span class="token operator">>=</span><span class="token number">200</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>count1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集合表达式"><a href="#集合表达式" class="headerlink" title="集合表达式"></a>集合表达式</h3><pre class="line-numbers language-python"><code class="language-python">list1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>set1<span class="token operator">=</span><span class="token punctuation">{</span>i<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> list1<span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="8、函数"><a href="#8、函数" class="headerlink" title="8、函数"></a>8、函数</h2><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>全局变量这里跟c++是有点不一样的，因为python中没有所谓的定义一说，又或者说全部都是定义，因此函数内部想要调用全局变量，竟然要声明</p><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token number">10</span><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a    a<span class="token operator">=</span><span class="token number">200</span><span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>test1<span class="token punctuation">(</span><span class="token punctuation">)</span>test2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数返回"><a href="#函数返回" class="headerlink" title="函数返回"></a>函数返回</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#函数返回两个值的时候，默认是返回个元组</span><span class="token keyword">def</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span>result<span class="token operator">=</span>num<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#(1,2,3)默认返回元组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数问题"><a href="#参数问题" class="headerlink" title="参数问题"></a>参数问题</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#缺省参数</span><span class="token keyword">def</span> <span class="token function">user</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'women'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'姓名：{name} 年龄：{age} 性别：{sex}'</span><span class="token punctuation">)</span>user<span class="token punctuation">(</span><span class="token string">'wfp'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'man'</span><span class="token punctuation">)</span>user<span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'man'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'www'</span><span class="token punctuation">)</span>user<span class="token punctuation">(</span><span class="token string">'wwww'</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span>user<span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'ggg'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#不定长参数：包裹位置参数和包裹关键字参数</span><span class="token keyword">def</span> <span class="token function">user1</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">##传进的参数有args参数收集，形成元组</span><span class="token keyword">def</span> <span class="token function">user2</span><span class="token punctuation">(</span><span class="token operator">**</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">##传进的参数形成字典</span>user1<span class="token punctuation">(</span><span class="token string">'wfp'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'man'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#('wfp', 12, 'man')</span>user2<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'wfp'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'man'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#{'name': 'wfp', 'age': 12, 'sex': 'man'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拆包"><a href="#拆包" class="headerlink" title="拆包"></a>拆包</h3><p>拆包就是把元组字典列表之类给拆开</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>n1<span class="token punctuation">,</span>n2<span class="token operator">=</span>num<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'n1={n1}和n2={n2}'</span><span class="token punctuation">)</span>dict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'wfp'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">}</span>a<span class="token punctuation">,</span>b<span class="token operator">=</span>dict<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'这是{a}和{dict[a]}'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>这也算是以前没有见过的引用嘞</p><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1</span>b<span class="token operator">=</span>a<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#同</span>a<span class="token operator">=</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#变</span><span class="token comment" spellcheck="true">#看你怎么区理解了，int类型是不可变类型，你只能理解成后来的a是重新定义了一个数，拿走了之前的符号。造成这种的原因就是定义与赋值之间模糊不清，也可以理解，毕竟人家用可变与不可变的思路</span><span class="token comment" spellcheck="true">#可变类型：list，dict，set</span><span class="token comment" spellcheck="true">#不可变类型：int float str tuple</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lambda语法"><a href="#lambda语法" class="headerlink" title="lambda语法"></a>lambda语法</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">200</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fn1<span class="token operator">=</span><span class="token keyword">lambda</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#&lt;function fn at 0x00000000026A7670></span><span class="token comment" spellcheck="true">#200</span><span class="token comment" spellcheck="true">#&lt;function &lt;lambda> at 0x00000000026A7700></span><span class="token comment" spellcheck="true">#100</span><span class="token comment" spellcheck="true">#注意一点，这种语法只能返回一个值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#分别对应参数，表达式返回值，具体参数值</span><span class="token comment" spellcheck="true">#针对于可变参数的表达式</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> <span class="token operator">*</span>arg<span class="token punctuation">:</span>arg<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#(10, 20, 30)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> <span class="token operator">**</span>arg<span class="token punctuation">:</span>arg<span class="token punctuation">)</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#{'name': 'python', 'age': 20}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span>a <span class="token keyword">if</span> a<span class="token operator">></span>b <span class="token keyword">else</span> b<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>student<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'wfp'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'def'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">]</span>student<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>把函数作为参数传入</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">+</span>f<span class="token punctuation">(</span>b<span class="token punctuation">)</span>result<span class="token operator">=</span>sum<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>abs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#内置的函数.map对元素统一进行操作.reduce累计.filter过滤函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><pre class="line-numbers language-python"><code class="language-python">f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'hello world\n'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输入这个不会进行换行</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'hello python'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>v<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#result1=v.read()</span>result2<span class="token operator">=</span>v<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#['hello world\n', 'hello python']</span>result3<span class="token operator">=</span>v<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出一行</span><span class="token comment" spellcheck="true">#print(result1)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span>v<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#os模块对文件进行操作</span><span class="token comment" spellcheck="true">#rename remove mkdir rmdirgetcwd chdir listdir类似linux的操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9、面向对象"><a href="#9、面向对象" class="headerlink" title="9、面向对象"></a>9、面向对象</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">washer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">300</span>        self<span class="token punctuation">.</span>weidth<span class="token operator">=</span><span class="token number">400</span>        self<span class="token punctuation">.</span>lenth<span class="token operator">=</span>len<span class="token comment" spellcheck="true">#python的思路是把初始化成员写在初始化函数中</span>    <span class="token keyword">def</span> <span class="token function">wash</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can wash '</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#self和c++中的this是一个道理</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'返回了\n'</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'已经删除'</span><span class="token punctuation">)</span>man1<span class="token operator">=</span>washer<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(man1)#这样打印只会打印出地址，需要添加——str——</span>man1<span class="token punctuation">.</span>wash<span class="token punctuation">(</span><span class="token punctuation">)</span>man1<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">100</span>man1<span class="token punctuation">.</span>weidth<span class="token operator">=</span><span class="token number">200</span><span class="token comment" spellcheck="true">#竟然可以通过变量来添加成员，这也太超常规了吧</span><span class="token comment" spellcheck="true">#print(man1.weidth)</span><span class="token comment" spellcheck="true">#print(man1.lenth)</span><span class="token comment" spellcheck="true">#del man1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'wfp'</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">12</span>    <span class="token keyword">def</span> <span class="token function">discribe</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'1姓名：{self.name}年龄：{self.age}'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'def'</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">13</span>    <span class="token keyword">def</span> <span class="token function">discribe</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'2姓名：{self.name}年龄：{self.age}'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'ghk'</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">14</span>    <span class="token keyword">def</span> <span class="token function">discribe2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'3姓名：{self.name}年龄：{self.age}'</span><span class="token punctuation">)</span>test<span class="token operator">=</span>C<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>name<span class="token punctuation">)</span>test<span class="token punctuation">.</span>discribe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#继承过程中出现同名，以当前为主即同名函数将原继承函数重写嘞</span><span class="token comment" spellcheck="true">#如果继承的项出现同名，以先出现的为主。</span><span class="token comment" spellcheck="true">#如果哪怕同名，我还是想写出继承的函数，需要重新写个函数，然后按照类进行初始化，进行调用</span><span class="token comment" spellcheck="true">#我不选择重新写函数，我可以用super来调用的，反正感觉这有些麻烦呀</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="私有权限"><a href="#私有权限" class="headerlink" title="私有权限"></a>私有权限</h3><p>定义的函数和成员类型以__开头就可以了。这样，类外无法访问，并且其他类也无法继承到私有的成员和函数。想要调用或者修改，必须在类内重新写函数</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态在我的C++中的理解，就是写一个虚函数的框架，其他的子类在这个框架的基础上进行修改，其实python学习上面的继承中已经体现到了多态，就是基于函数的重写，并且多态的优势在于主框架的指针能够指向其他的重写子类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xuhanshu'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">armydog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'armydog fight'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">drugdog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'drug dog fight'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">person_with_dog</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>ddog<span class="token punctuation">)</span><span class="token punctuation">:</span>        ddog<span class="token punctuation">.</span>work<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token operator">=</span>armydog<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token operator">=</span>drugdog<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token operator">=</span>person<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>person_with_dog<span class="token punctuation">(</span>a<span class="token punctuation">)</span>p<span class="token punctuation">.</span>person_with_dog<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><p>当我把类的属性改掉了的时候，哪怕我提前定义了变量，变量中的值也会被改掉</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        age<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xuhanshu'</span><span class="token punctuation">)</span>a<span class="token operator">=</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token operator">=</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>Dog<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">23</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    __name<span class="token operator">=</span><span class="token string">'ddd'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        age<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xuhanshu'</span><span class="token punctuation">)</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>__namea<span class="token operator">=</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#在提取类成员函数的时候，通常都是利用类方法的手段</span>Dog<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">23</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#23</span><span class="token keyword">print</span><span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    __name<span class="token operator">=</span><span class="token string">'ddd'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        age<span class="token operator">=</span><span class="token number">1</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#没有参数传递</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xuhanshu'</span><span class="token punctuation">)</span>a<span class="token operator">=</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#在提取类成员函数的时候，通常都是利用类方法的手段</span>Dog<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">23</span><span class="token comment" spellcheck="true">#直接能够修改类内的成员</span><span class="token keyword">print</span><span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#23可以发现，成员我无论从变量访问还是成员访问，都是访问的到的</span><span class="token comment" spellcheck="true">#print(a.work())</span><span class="token keyword">print</span><span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>work<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#通过类无法访问函数,从而引出静态方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10、模块和包"><a href="#10、模块和包" class="headerlink" title="10、模块和包"></a>10、模块和包</h3><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>这个模块应该是类似于C++中的头文件吧</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#模块</span><span class="token keyword">import</span> math<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token comment" spellcheck="true">#这里如果是*的话那么应该是内部所有都可以直接调用</span><span class="token keyword">print</span><span class="token punctuation">(</span>sqrt<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#如何制作模块?新建一个文件</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#这个属于在原文件中进行测试</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#而后进行调用</span><span class="token keyword">import</span> my_moudle<span class="token keyword">print</span><span class="token punctuation">(</span>my_moudle<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#注意，如果from math import *本来指的是math所有全部调用。现在调价__all__=[所需要的的]，调用*的时候就只是调用列表中的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包就是把模块打包形成一个文件夹</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> mypackage <span class="token keyword">import</span> my_moudle<span class="token keyword">print</span><span class="token punctuation">(</span>my_moudle<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建的初始化文件中设置__all__=[]:可以设置允许添加的模块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程通信</title>
      <link href="/posts/53ad465c.html"/>
      <url>/posts/53ad465c.html</url>
      
        <content type="html"><![CDATA[<h1 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h1><p>进程通信的方式：</p><ul><li><p>pipe管道</p></li><li><p>fifo有名管道</p></li><li><p>mmap文件映射共享IO</p></li><li><p>本地socket—最稳定</p></li><li><p>信号—携带信息最小</p></li><li><p>共享内存</p></li><li><p>消息队列</p></li></ul><h2 id="1、pipe通信"><a href="#1、pipe通信" class="headerlink" title="1、pipe通信"></a>1、pipe通信</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个数组空，0代表读，1代表写</span>    <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    pid_t pid <span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子进程写了hello</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从管道里面读出来内容</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读管道：</p><ul><li><p>写端全部关闭，read读到0</p></li><li><p>写端没有全部关闭：有数据，read正常读；无数据，阻塞—等待数据的传递</p></li></ul><p>写管道：</p><ul><li>读端关闭：程序异常，产生SIGPIPE的信号，程序异常终止</li><li>读端未全部关闭：管道未满,可以正常写入；管道满了，写阻塞，无法继续写</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    pid_t pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重定位,这里目前存在疑问呀</span>        <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">"ps"</span><span class="token punctuation">,</span><span class="token string">"ps"</span><span class="token punctuation">,</span><span class="token string">"aux"</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">"grep"</span><span class="token punctuation">,</span><span class="token string">"grep"</span><span class="token punctuation">,</span><span class="token string">"bash"</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//现在的grep不会死掉，认为仍有写段存在，因此进程没有退，从而形成了子进程僵尸进程</span>        <span class="token comment" spellcheck="true">//因此我需要关掉父进程的写段端口，让父进程也能死亡</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点：</p><p>只能血缘关系进程之间通信，通常是父子进程的单方向通信</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/wait.h></span></span><span class="token comment" spellcheck="true">//这个进程说明了读端全部关闭后产生的信号问题</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    pid_t pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> status<span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">WIFSIGNALED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"killed by %d\n"</span><span class="token punctuation">,</span><span class="token function">WTERMSIG</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、FIFO通信"><a href="#2、FIFO通信" class="headerlink" title="2、FIFO通信"></a>2、FIFO通信</h2><p>实现无血缘关系进程通信：创建管道的伪文件</p><p>fifo读的写法：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"./a.out fifoname\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//当前目录中已经创建了fifo文件</span>    <span class="token comment" spellcheck="true">//打开fifo文件</span>    <span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> ret<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         ret<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read:%s\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//关闭</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fife写的写法：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"./a.out fifoname\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//当前目录中已经创建了fifo文件</span>    <span class="token comment" spellcheck="true">//打开fifo文件</span>    <span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//写</span>     <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"xiaoming%4d"</span><span class="token punctuation">,</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//关闭</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、mmap共享映射"><a href="#3、mmap共享映射" class="headerlink" title="3、mmap共享映射"></a>3、mmap共享映射</h2><pre class="line-numbers language-C"><code class="language-C">#include <stdio.h>#include<unistd.h>#include<sys/types.h>#include<sys/stat.h>#include<fcntl.h>#include<sys/mman.h>#include<string.h>int main(){    int fd=open("aa.txt",O_RDWR);    char*mem=mmap(NULL,8,PROT_READ|PROT_WRITE,MAP_SHARED,fd,0);//申请到一块内存    //flags位有两个shared和privare，前者会修改到原文件，后者则不会    if(mem==MAP_FAILED)    {        perror("error");        return -1;    }    strcpy(mem,"hello");    munmap(mem,8);    close(fd);    return 0;}//通过这种方式往文件里面写进东西<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、信号"><a href="#4、信号" class="headerlink" title="4、信号"></a>4、信号</h2><p>信号的产生方式：</p><ul><li>按键：CTRL C，CTRL Z</li><li>系统调用函数产生：kill raise abort</li><li>软件条件产生：定时器</li><li>硬件异常产生：段错误，浮点数，内存对齐出错</li><li>命令：kill</li></ul><p>信号的状态：产生，递达（到达并处理），未决（处于阻塞状态）</p><p>信号的四要素： 1.编号 2. 名称 3. 事件 4. 默认处理动作</p><p>信号的处理方式：忽略，执行默认动作，捕获；其中默认动作分为终止，忽略，终止产生core，暂停，继续</p><p> <strong>阻塞信号集</strong>： 将某些信号加入集合，对他们设置屏蔽，当屏蔽x信号后，再收到该信号，该信号的处理将推后(解除屏蔽后)</p><p><strong>未决信号集</strong>: </p><ul><li><p>信号产生，未决信号集中描述该信号的位立刻翻转为1，表信号处于未决状态。当信号被处理对应位翻转回为0。这一时刻往往非常短暂。 </p></li><li><p>信号产生后由于某些原因(主要是阻塞)不能抵达。这类信号的集合称之为未决信号集。在屏蔽解除前，信号一直处于未决状态。  </p></li></ul><h3 id="信号产生"><a href="#信号产生" class="headerlink" title="信号产生"></a>信号产生</h3><h4 id="kill函数-命令产生信号"><a href="#kill函数-命令产生信号" class="headerlink" title="kill函数/命令产生信号"></a>kill函数/命令产生信号</h4><ol><li><p>kill命令产生信号：kill -SIGKILL pid</p></li><li><p>kill函数：给指定进程发送指定信号(不一定杀死)</p><p>int kill(pid_t pid, int sig);  成功：0；失败：-1 (ID非法，信号非法，普通用户杀init进程等权级问题)，设置errno</p></li></ol><p>​     sig：不推荐直接使用数字，应使用宏名，因为不同操作系统信号编号可能不同，但名称一致。</p><p>​     pid &gt; 0: 发送信号给指定的进程。</p><p>​     pid = 0: 发送信号给 与调用kill函数进程属于同一进程组的所有进程。</p><p>​     pid &lt; 0: 取|pid|发给对应进程组。</p><p>​     pid = -1：发送给进程有权限发送的系统中所有进程。</p><p>利用kill函数杀死子进程：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;signal.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pid_t pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i ll kill father\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">kill</span><span class="token punctuation">(</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SIGKILL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i am parent\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="raise和abort函数"><a href="#raise和abort函数" class="headerlink" title="raise和abort函数"></a>raise和abort函数</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;signal.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i ll die\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//raise(SIGKILL);//自己给自己发送信号</span>    <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接异常退出</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="alarm函数"><a href="#alarm函数" class="headerlink" title="alarm函数"></a>alarm函数</h4><p>返回值是返回触发之后的剩余秒数，时间结束后给自己发送信号SIGALRM，如果传入参数为0，代表取消闹钟</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i am active\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="setitimer函数"><a href="#setitimer函数" class="headerlink" title="setitimer函数"></a>setitimer函数</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//这样写的类似alarm是一样的</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> itimerval myit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3秒后发送信号</span>    <span class="token function">setitimer</span><span class="token punctuation">(</span>ITIMER_REAL<span class="token punctuation">,</span><span class="token operator">&amp;</span>myit<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"who can kill me \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="信号处理"><a href="#信号处理" class="headerlink" title="信号处理"></a>信号处理</h3><p>  sigset_t set;     // typedef unsigned long sigset_t; </p><p>  int sigemptyset(sigset_t *set);             将某个信号集清0              成功：0；失败：-1</p><p>  int sigfillset(sigset_t *set);                 将某个信号集置1            成功：0；失败：-1</p><p>  int sigaddset(sigset_t *set, int signum);      将某个信号加入信号集       成功：0；失败：-1</p><p>  int sigdelset(sigset_t *set, int signum);      将某个信号清出信号集       成功：0；失败：-1</p><p>  int sigismember(const sigset_t *set, int signum);判断某个信号是否在信号集中   返回值：在集合：1；不在：0；出错：-1 </p><p>  sigset_t类型的本质是位图。但不应该直接使用位操作，而应该使用上述函数，保证跨系统操作有效。</p><h4 id="sigprogmask函数"><a href="#sigprogmask函数" class="headerlink" title="sigprogmask函数"></a>sigprogmask函数</h4><p>设置解除阻塞信号：int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);</p><ul><li>how:SIG_BLOCK,SIG_UNBLOCK, SIG_SETMASK</li></ul><h4 id="sigpending函数"><a href="#sigpending函数" class="headerlink" title="sigpending函数"></a>sigpending函数</h4><p>读取当前进程的<strong>未决</strong>信号集</p><p>int sigpending(sigset_t *set); set传出参数。  返回值：成功：0；失败：-1，设置errno,这个传输参数有点像waitpid中status</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;signal.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sigset_t pend<span class="token punctuation">,</span>sigproc<span class="token punctuation">;</span>    <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sigproc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sigproc<span class="token punctuation">,</span>SIGINT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将sigint信号加入到了信号集</span>    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span><span class="token operator">&amp;</span>sigproc<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置阻塞信号集,使得信号处于一个阻塞状态</span>    <span class="token comment" spellcheck="true">//这样才能看到未决信号集中的状态</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sigpending</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pend<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取当前未决信号集</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sigismember</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pend<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1代表该信号在信号集中</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这个程序就把ctrl c所发出的sigint信号给进行阻塞了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="信号捕捉"><a href="#信号捕捉" class="headerlink" title="信号捕捉"></a>信号捕捉</h3><p>信号捕捉能够防止进程意外死亡</p><h4 id="sigaction函数"><a href="#sigaction函数" class="headerlink" title="sigaction函数"></a>sigaction函数</h4><p>int sigaction(int signum, const struct sigaction *act,<br>                     struct sigaction *oldact);</p><p>struct sigaction {<br>               void     (<em>sa_handler)(int);//函数指针<br>               void     (</em>sa_sigaction)(int, siginfo_t <em>, void *);<br>               sigset_t   sa_mask;//临时屏蔽的信号集<br>               int        sa_flags;//0<br>               void     (</em>sa_restorer)(void);//无效<br>           };</p><pre><code>#include&lt;stdio.h&gt;#include&lt;sys/time.h&gt;#include&lt;unistd.h&gt;#include&lt;signal.h&gt;void catch_sig(int num){    printf("catch %d sig\n",num);}int main(){    struct sigaction act;    act.sa_flags=0;    act.sa_handler=catch_sig;//这个是捕捉后执行的函数指针    sigemptyset(&amp;act.sa_mask);//临时屏蔽的信号集，当我们的catch_sig函数执行结束的时候，临时屏蔽信号集结束    sigaction(SIGALRM,&amp;act,NULL);    struct itimerval myit={{3,0},{5,0}};    setitimer(ITIMER_REAL,&amp;myit,NULL);    while(1)    {        printf("who can kill me \n");        sleep(1);    }    return 0;}//正常情况下sigalrm信号是结束进程，这个程序捕捉到该信号，catch_sig执行了我们自己写的函数</code></pre><p>验证信号不会排队只会选择丢弃的机制：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;signal.h></span></span><span class="token keyword">void</span> <span class="token function">catch_sig</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"catch %d sig\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"end\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> sigaction act<span class="token punctuation">;</span>    act<span class="token punctuation">.</span>sa_flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    act<span class="token punctuation">.</span>sa_handler<span class="token operator">=</span>catch_sig<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个是捕捉后执行的函数指针</span>    <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//临时屏蔽的信号集</span>    <span class="token function">sigaction</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span><span class="token operator">&amp;</span>act<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"who can kill me \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SIGCHLD信号"><a href="#SIGCHLD信号" class="headerlink" title="SIGCHLD信号"></a>SIGCHLD信号</h4><p>子进程死掉的时候，会受到sigchld信号，我们可以直接捕捉sigchld信号，自定义函数来进行回收</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/wait.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;signal.h></span></span><span class="token keyword">void</span> <span class="token function">catch_sig</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    pid_t wpid<span class="token operator">=</span><span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>WNOHANG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>wpid<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"wait child %d ok\n"</span><span class="token punctuation">,</span>wpid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    pid_t pid<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//捕捉函数</span>        <span class="token keyword">struct</span> sigaction act<span class="token punctuation">;</span>        act<span class="token punctuation">.</span>sa_flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>        act<span class="token punctuation">.</span>sa_handler<span class="token operator">=</span>catch_sig<span class="token punctuation">;</span>        <span class="token function">sigaction</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span><span class="token operator">&amp;</span>act<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i m %d child,pid=%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果几个进程同时退出，可以会造成排队丢弃哦，改的方法是捕捉函数写while，争取一个信号捕捉函数回收所有子进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode1018</title>
      <link href="/posts/8e016b2c.html"/>
      <url>/posts/8e016b2c.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c"><code class="language-c">给定由若干 <span class="token number">0</span> 和 <span class="token number">1</span> 组成的数组 A。我们定义 N_i：从 A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 到 A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> 的第 i 个子数组被解释为一个二进制数（从最高有效位到最低有效位）。返回布尔值列表 answer，只有当 N_i 可以被 <span class="token number">5</span> 整除时，答案 answer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> 为 true，否则为 false。示例 <span class="token number">1</span>：输入：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span>true<span class="token punctuation">,</span>false<span class="token punctuation">,</span>false<span class="token punctuation">]</span>解释：输入数字为 <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">,</span> <span class="token number">011</span>；也就是十进制中的 <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span> 。只有第一个数可以被 <span class="token number">5</span> 整除，因此 answer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 为真。示例 <span class="token number">2</span>：输入：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span>false<span class="token punctuation">,</span>false<span class="token punctuation">,</span>false<span class="token punctuation">]</span>示例 <span class="token number">3</span>：输入：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span>true<span class="token punctuation">,</span>false<span class="token punctuation">,</span>false<span class="token punctuation">,</span>false<span class="token punctuation">,</span>true<span class="token punctuation">,</span>false<span class="token punctuation">]</span>示例 <span class="token number">4</span>：输入：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span>false<span class="token punctuation">,</span>false<span class="token punctuation">,</span>false<span class="token punctuation">,</span>false<span class="token punctuation">,</span>false<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个题给人的感觉很简单啊，莫非是还有什么别的更加简单的方法？我每移动一次，就是二倍的乘积然后再加当前数组，然后直接把结果放进去就可以了。</p><p>事实证明想简单了，超出了限制了呀。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>using namespace std<span class="token punctuation">;</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span>bool<span class="token operator">></span> <span class="token function">prefixesDivBy5</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>bool<span class="token operator">></span>answer<span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp<span class="token operator">=</span><span class="token punctuation">(</span>tmp<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>tmp<span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                answer<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                answer<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> answer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>否则应该怎么做？如何突破？利用了%10这个坎</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>using namespace std<span class="token punctuation">;</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span>bool<span class="token operator">></span> <span class="token function">prefixesDivBy5</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>bool<span class="token operator">></span>answer<span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           answer<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> answer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode1203</title>
      <link href="/posts/34c578b.html"/>
      <url>/posts/34c578b.html</url>
      
        <content type="html"><![CDATA[<pre><code>公司共有 n 个项目和  m 个小组，每个项目要不无人接手，要不就由 m 个小组之一负责。group[i] 表示第 i 个项目所属的小组，如果这个项目目前无人接手，那么 group[i] 就等于 -1。（项目和小组都是从零开始编号的）小组可能存在没有接手任何项目的情况。请你帮忙按要求安排这些项目的进度，并返回排序后的项目列表：同一小组的项目，排序后在列表中彼此相邻。项目之间存在一定的依赖关系，我们用一个列表 beforeItems 来表示，其中 beforeItems[i] 表示在进行第 i 个项目前（位于第 i 个项目左侧）应该完成的所有项目。如果存在多个解决方案，只需要返回其中任意一个即可。如果没有合适的解决方案，就请返回一个 空列表 。示例 1：输入：n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]输出：[6,3,4,1,5,2,0,7]</code></pre><p>初见的时候，我的想法是按照组数来构建出来几个拓扑图，然后调用拓扑排序，拓扑排序的算法我是会的，但是答案所说的分成组内和组间那个，是真的没有看懂，难受啊。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span>using namespace std<span class="token punctuation">;</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">topSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> deg<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> graph<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> item<span class="token punctuation">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>deg<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个方法是先把入度为0的点拿出来。这些点是可以被访问的</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v<span class="token punctuation">:</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>deg<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这一步是来看我把入度为0的点访问删除后，以该点为入度的点的入度值都会减1</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> items<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> res <span class="token punctuation">:</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用这种等号的方式来判断是否是拓扑结构嘛</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortItems</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> group<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> beforeItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">groupItem</span><span class="token punctuation">(</span>n <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 组间和组内依赖图</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">groupGraph</span><span class="token punctuation">(</span>n <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">itemGraph</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个是组内关系图？？因为分的组数永远无法超过n</span>        <span class="token comment" spellcheck="true">// 组间和组内入度数组</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">groupDegree</span><span class="token punctuation">(</span>n <span class="token operator">+</span> m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">itemDegree</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> id<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            id<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//排了n+m个号</span>        <span class="token keyword">int</span> leftId <span class="token operator">=</span> m<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给未分配的 item 分配一个 groupId</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                group<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> leftId<span class="token punctuation">;</span>                leftId <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//照着他的意思，是把每一个没有分配的，单独做成一个组了呀</span>            <span class="token punctuation">}</span>            groupItem<span class="token punctuation">[</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 依赖关系建图</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> curGroupId <span class="token operator">=</span> group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> item<span class="token punctuation">:</span> beforeItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> beforeGroupId <span class="token operator">=</span> group<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>beforeGroupId <span class="token operator">==</span> curGroupId<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    itemDegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    itemGraph<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    groupDegree<span class="token punctuation">[</span>curGroupId<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    groupGraph<span class="token punctuation">[</span>beforeGroupId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>curGroupId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 组间拓扑关系排序</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> groupTopSort <span class="token operator">=</span> <span class="token function">topSort</span><span class="token punctuation">(</span>groupDegree<span class="token punctuation">,</span> groupGraph<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>groupTopSort<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 组内拓扑关系排序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> curGroupId<span class="token punctuation">:</span> groupTopSort<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> groupItem<span class="token punctuation">[</span>curGroupId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res <span class="token operator">=</span> <span class="token function">topSort</span><span class="token punctuation">(</span>itemDegree<span class="token punctuation">,</span> itemGraph<span class="token punctuation">,</span> groupItem<span class="token punctuation">[</span>curGroupId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> item<span class="token punctuation">:</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 1202</title>
      <link href="/posts/7203e83.html"/>
      <url>/posts/7203e83.html</url>
      
        <content type="html"><![CDATA[<pre><code>给你一个字符串 s，以及该字符串中的一些「索引对」数组 pairs，其中 pairs[i] = [a, b] 表示字符串中的两个索引（编号从 0 开始）。你可以 任意多次交换 在 pairs 中任意一对索引处的字符。返回在经过若干次交换后，s 可以变成的按字典序最小的字符串。示例 1:输入：s = "dcab", pairs = [[0,3],[1,2]]输出："bacd"解释： 交换 s[0] 和 s[3], s = "bcad"交换 s[1] 和 s[2], s = "bacd"示例 2：输入：s = "dcab", pairs = [[0,3],[1,2],[0,2]]输出："abcd"解释：交换 s[0] 和 s[3], s = "bcad"交换 s[0] 和 s[2], s = "acbd"交换 s[1] 和 s[2], s = "abcd"示例 3：输入：s = "cba", pairs = [[0,1],[1,2]]输出："abc"解释：交换 s[0] 和 s[1], s = "bca"交换 s[1] 和 s[2], s = "bac"交换 s[0] 和 s[1], s = "abc"</code></pre><p>其实这个题我看了一下也懂了，无非是找最大的联通图，即联通向量。找到后将其中的元素按照从小到大的顺序依次填入，这里人家用到了并查集，我不是很会。需要研究研究。</p><pre class="line-numbers language-c++"><code class="language-c++">class DisjointSetUnion {private:    vector<int> f, rank;    int n;public:    DisjointSetUnion(int _n) {        n = _n;        rank.resize(n, 1);        f.resize(n);        for (int i = 0; i < n; i++) {            f[i] = i;        }    }    int find(int x) {        return f[x] == x ? x : f[x] = find(f[x]);    }    void unionSet(int x, int y) {        int fx = find(x), fy = find(y);        if (fx == fy) {            return;        }        if (rank[fx] < rank[fy]) {            swap(fx, fy);        }        rank[fx] += rank[fy];        f[fy] = fx;    }};class Solution {public:    string smallestStringWithSwaps(string s, vector<vector<int>>& pairs) {        DisjointSetUnion dsu(s.length());        for (auto& it : pairs) {            dsu.unionSet(it[0], it[1]);        }        unordered_map<int, vector<int>> mp;        for (int i = 0; i < s.length(); i++) {            mp[dsu.find(i)].emplace_back(s[i]);        }        for (auto& [x, vec] : mp) {            sort(vec.begin(), vec.end(), greater<int>());        }        for (int i = 0; i < s.length(); i++) {            int x = dsu.find(i);            s[i] = mp[x].back();            mp[x].pop_back();        }        return s;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·<a href="https://zhuanlan.zhihu.com/p/93647900" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/93647900</a></p><p>一个关于并查集的算法连接，可以看一看</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程控制</title>
      <link href="/posts/d9c2550.html"/>
      <url>/posts/d9c2550.html</url>
      
        <content type="html"><![CDATA[<h1 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h1><h2 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h2><h4 id="创建一个进程："><a href="#创建一个进程：" class="headerlink" title="创建一个进程："></a>创建一个进程：</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"unistd.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Begin:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"im child,pid=%d,ppid=%d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"im parent,childid=%d,self=%d,ppid=%d"</span><span class="token punctuation">,</span> pid<span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"end!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建五个进程："><a href="#创建五个进程：" class="headerlink" title="创建五个进程："></a>创建五个进程：</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;nistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    pid_t pid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"im child\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"im parent\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父子进程之间有哪些异同呢？？</p><ul><li><p>相同：全局变量，.text,.data,栈，堆，环境变量，用户id，宿主目录，进程工作目录，信号处理方式</p></li><li><p>不同：进程id，fork返回值，父进程id，进程运行时间，定时器，未决信号集</p></li></ul><h4 id="进程共享："><a href="#进程共享：" class="headerlink" title="进程共享："></a>进程共享：</h4><p>新创建的fork子进程，其实不只是单单地在内存创建一块区域这么简单。原则是读的时候共享，写的时候是再开辟空间。也就是说单独的读取数据是不开辟空间，父子影射同一内存空间。进而来节省开销。</p><p>代码演示:</p><pre class="line-numbers language-C"><code class="language-C">#include <stdio.h>#include<unistd.h>int val=100;int main(){    pid_t pid=fork();    if(pid==0)    {        printf("child val=%d,pid=%d,ppid=%d\n",val,getpid(),getppid());        val=1001;        printf("child val=%d,pid=%d,ppid=%d\n",val,getpid(),getppid());    }    else if(pid>0)    {        sleep(1);//保证子进程修改val成功        printf("parent val=%d,pid=%d,ppid=%d\n",val,getpid(),getppid());    }}//从这个运行结果可以发现，是重新开辟了空间的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="孤儿进程与僵尸进程"><a href="#孤儿进程与僵尸进程" class="headerlink" title="孤儿进程与僵尸进程"></a>孤儿进程与僵尸进程</h2><h4 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h4><p>杀死父进程，形成孤儿进程，子进程会被unit给领养：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    pid_t pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">pritnf</span><span class="token punctuation">(</span><span class="token string">"im child,pid=%d,ppid=%d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">geippid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"im parent,pid=%d,ppid=%d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ill die\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h4><ul><li>如果子进程被杀死，父进程不进行回收，将形成僵尸进程：显然，父进程是一直在的。但是子进程已经死了，父进程又没有回收。想要将子进程回收，可以杀死父亲，从而init可以 领养</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    pid_t pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"im parent,pid=%d,ppid=%d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"im child,pid=%d,ppid=%d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ill die\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>利用wait函数来回收子进程（僵尸进程）</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"im child,will die\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//return 101;</span>        <span class="token comment" spellcheck="true">//exit(102);</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"im parent wait for child die\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> status<span class="token punctuation">;</span>        pid_t wpid <span class="token operator">=</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"wait ok,wpid=%d,pid=%d"</span><span class="token punctuation">,</span> wpid<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WIFEXITED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child exit with%d\n"</span><span class="token punctuation">,</span> <span class="token function">WEXITSTATUS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WIFSIGNALED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child killed by%d\n"</span><span class="token punctuation">,</span> <span class="token function">WTERMSIG</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>waitpid来回收子进程</p><p>waitpid是一个比wait更加复杂的函数，完成的功能也更多。</p></li></ul><h2 id="excel族函数"><a href="#excel族函数" class="headerlink" title="excel族函数"></a>excel族函数</h2><p>exec的函数的本质是将fork建立的进程占领，在进程中放入自己要调用的代码，这就是main函数作为入口函数的现实意义吧。exec函数的特点是成功的话是不反悔的，直接进入别的程序之中。 比方说：你在shell中敲一个指令，bash是先fork，父进程仍然是bash，子进程用exec来调用指令。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>       <span class="token keyword">extern</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>environ<span class="token punctuation">;</span>       <span class="token keyword">int</span> <span class="token function">execl</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                       <span class="token comment" spellcheck="true">/* (char  *) NULL */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                       <span class="token comment" spellcheck="true">/* (char  *) NULL */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> <span class="token function">execle</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                       <span class="token comment" spellcheck="true">/*, (char *) NULL, char * const envp[] */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> <span class="token function">execv</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> <span class="token function">execvp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> <span class="token function">execvpe</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写一个实例：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//int execlp(const char *file, const char *arg, ...</span>    <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span><span class="token string">"ls"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token operator">-</span>l"<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里也可以发现第一个参数显然是使用了环境变量，arg参数中第一个是程序名称，后面以此变量，用null收尾</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"exec err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布局和控件</title>
      <link href="/posts/8319047e.html"/>
      <url>/posts/8319047e.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c++"><code class="language-c++">#include "widget.h"#include "ui_widget.h"#include <QDebug>Widget::Widget(QWidget *parent) :    QWidget(parent),    ui(new Ui::Widget){    ui->setupUi(this);    //设置单选按钮 男默认选中    ui->rBtnMan->setChecked(true);    //选中女后 打印信息    connect(ui->rBtnWoman,&QRadioButton::clicked,[=](){        qDebug() << "选中了女了！";    });    //多选按钮  2是选中  0是未选中 1是半选    connect(ui->cBox,&QCheckBox::stateChanged,[=](int state){        qDebug() << state;    });    //利用listWidget写诗//    QListWidgetItem * item = new QListWidgetItem("锄禾日当午");//    //将一行诗放入到listWidget控件中//    ui->listWidget->addItem(item);//    item->setTextAlignment(Qt::AlignHCenter);    //QStringList   QList<QString>    QStringList list ;    list << "锄禾日当午" << "旱地和下土" << "谁知盘中餐"<< "粒粒皆辛苦";    ui->listWidget->addItems(list);}Widget::~Widget(){    delete ui;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续写树的类型：treeWidget：</p><pre class="line-numbers language-c++"><code class="language-c++">#include "widget.h"#include "ui_widget.h"Widget::Widget(QWidget *parent) :    QWidget(parent),    ui(new Ui::Widget){    ui->setupUi(this);    //treeWidget树控件使用    //设置水平头    ui->treeWidget->setHeaderLabels(QStringList()<< "英雄"<< "英雄介绍");    QTreeWidgetItem * liItem = new QTreeWidgetItem(QStringList()<< "力量");    QTreeWidgetItem * minItem = new QTreeWidgetItem(QStringList()<< "敏捷");    QTreeWidgetItem * zhiItem = new QTreeWidgetItem(QStringList()<< "智力");    //加载顶层的节点    ui->treeWidget->addTopLevelItem(liItem);    ui->treeWidget->addTopLevelItem(minItem);    ui->treeWidget->addTopLevelItem(zhiItem);    //追加子节点    QStringList heroL1;    heroL1 << "刚被猪" << "前排坦克，能在吸收伤害的同时造成可观的范围输出";    QTreeWidgetItem * l1 = new QTreeWidgetItem(heroL1);    liItem->addChild(l1);}Widget::~Widget(){    delete ui;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续写表格的布局qtablewidget：</p><pre class="line-numbers language-c++"><code class="language-c++">//TableWidget控件    //设置列数    ui->tableWidget->setColumnCount(3);    //设置水平表头    ui->tableWidget->setHorizontalHeaderLabels(QStringList()<<"姓名"<< "性别"<< "年龄");    //设置行数    ui->tableWidget->setRowCount(5);    //设置正文    //ui->tableWidget->setItem(0,0, new QTableWidgetItem("亚瑟"));    QStringList nameList;    nameList<< "亚瑟"<< "赵云"<< "张飞"<< "关羽" << "花木兰";    QList<QString> sexList;    sexList << "男"<< "男"<< "男"<< "男"<< "女";    for(int i = 0 ; i < 5 ;i ++)    {        int col = 0;        ui->tableWidget->setItem(i,col++, new QTableWidgetItem(nameList[i]));        ui->tableWidget->setItem(i,col++, new QTableWidgetItem(sexList.at(i)));        //int 转 QString        ui->tableWidget->setItem(i,col++, new QTableWidgetItem( QString::number(i+18)));    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面的是一些其他的控件：</p><pre class="line-numbers language-c++"><code class="language-c++">#include "widget.h"#include "ui_widget.h"#include <QMovie>Widget::Widget(QWidget *parent) :    QWidget(parent),    ui(new Ui::Widget){    ui->setupUi(this);    //栈控件使用    //设置默认定位 scrollArea    ui->stackedWidget->setCurrentIndex(1);    //scrollArea按钮    connect(ui->btn_scrollArea,&QPushButton::clicked,[=](){        ui->stackedWidget->setCurrentIndex(1);    });    //toolBox按钮    connect(ui->btn_ToolBox,&QPushButton::clicked,[=](){        ui->stackedWidget->setCurrentIndex(2);    });    //TabWidget按钮    connect(ui->btn_TabWidget,&QPushButton::clicked,[=](){        ui->stackedWidget->setCurrentIndex(0);    });    //下拉框    ui->comboBox->addItem("奔驰");    ui->comboBox->addItem("宝马");    ui->comboBox->addItem("拖拉机");    //点击按钮 选中拖拉机选项    connect(ui->btn_select,&QPushButton::clicked,[=](){        //ui->comboBox->setCurrentIndex(2);        ui->comboBox->setCurrentText("拖拉机");    });    //利用QLabel显示图片    ui->lbl_Image->setPixmap(QPixmap(":/Image/butterfly.png"));    //利用QLabel显示 gif动态图片    QMovie * movie = new QMovie(":/Image/mario.gif");    ui->lbl_movie->setMovie(movie);    //播放动图    movie->start();}Widget::~Widget(){    delete ui;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鼠标</title>
      <link href="/posts/68611181.html"/>
      <url>/posts/68611181.html</url>
      
        <content type="html"><![CDATA[<p>自定义了一个控件mylabel，然后重写鼠标的函数：</p><pre class="line-numbers language-c++"><code class="language-c++">#ifndef MYLABEL_H#define MYLABEL_H#include <QLabel>class myLabel : public QLabel{    Q_OBJECTpublic:    explicit myLabel(QWidget *parent = nullptr);    //鼠标进入事件    void enterEvent(QEvent *event);    //鼠标离开事件    void leaveEvent(QEvent *);    //鼠标按下    virtual void mousePressEvent(QMouseEvent *ev);    //鼠标释放    virtual void mouseReleaseEvent(QMouseEvent *ev);    //鼠标移动    virtual void  mouseMoveEvent(QMouseEvent *ev);signals:public slots:};#endif // MYLABEL_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include "mylabel.h"#include <QDebug>#include <QMouseEvent>myLabel::myLabel(QWidget *parent) : QLabel(parent){    //设置鼠标追踪状态    //setMouseTracking(true);}//鼠标进入事件void myLabel::enterEvent(QEvent *event){   // qDebug() << "鼠标进入了";}//鼠标离开事件void myLabel::leaveEvent(QEvent *){   // qDebug() << "鼠标离开了";}//鼠标按下void myLabel::mousePressEvent(QMouseEvent *ev){    //当鼠标左键按下  提示信息//    if( ev->button() ==  Qt::LeftButton)//    {        QString str = QString( "鼠标按下了 x = %1   y = %2  globalX = %3 globalY = %4 " ).arg(ev->x()).arg(ev->y()).arg(ev->globalX()).arg(ev->globalY());        qDebug() << str;//    }}//鼠标释放void myLabel::mouseReleaseEvent(QMouseEvent *ev){//    if( ev->button() ==  Qt::LeftButton)//    {    QString str = QString( "鼠标释放了 x = %1   y = %2  globalX = %3 globalY = %4 " ).arg(ev->x()).arg(ev->y()).arg(ev->globalX()).arg(ev->globalY());    qDebug() << str;//    }}//鼠标移动void myLabel::mouseMoveEvent(QMouseEvent *ev){    if( ev->buttons() &   Qt::LeftButton )    {    QString str = QString( "鼠标移动了 x = %1   y = %2  globalX = %3 globalY = %4 " ).arg(ev->x()).arg(ev->y()).arg(ev->globalX()).arg(ev->globalY());    qDebug() << str;   }}bool myLabel::event(QEvent *e){    //如果是鼠标按下 ，在event事件分发中做拦截操作    if(e->type() == QEvent::MouseButtonPress)    {        QMouseEvent * ev  = static_cast<QMouseEvent *>(e);        QString str = QString( "Event函数中：：鼠标按下了 x = %1   y = %2  globalX = %3 globalY = %4 " ).arg(ev->x()).arg(ev->y()).arg(ev->globalX()).arg(ev->globalY());        qDebug() << str;        return true; //true代表用户自己处理这个事件，不向下分发    }    //其他事件 交给父类处理  默认处理    return QLabel::event(e);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode189</title>
      <link href="/posts/76eca7b9.html"/>
      <url>/posts/76eca7b9.html</url>
      
        <content type="html"><![CDATA[<pre><code>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。示例 1:输入: [1,2,3,4,5,6,7] 和 k = 3输出: [5,6,7,1,2,3,4]解释:向右旋转 1 步: [7,1,2,3,4,5,6]向右旋转 2 步: [6,7,1,2,3,4,5]向右旋转 3 步: [5,6,7,1,2,3,4]示例 2:输入: [-1,-100,3,99] 和 k = 2输出: [3,99,-1,-100]解释: 向右旋转 1 步: [99,-1,-100,3]向右旋转 2 步: [3,99,-1,-100]说明:尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。要求使用空间复杂度为 O(1) 的 原地 算法。来源：力扣（LeetCode）</code></pre><p>个人解法：这个题很简单的，直接旋转三次，先完全旋转，然后前k个单独旋转，后面的也单独旋转:</p><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>#include<vector>using namespace std;class Solution {public:    void rot(vector<int>& nums, int i, int j)    {        while (i < j)        {            int tmp = nums[i];            nums[i] = nums[j];            nums[j] = tmp;            i++;            j--;        }    }    void rotate(vector<int>& nums, int k) {        int len = nums.size();        k = k % len;        rot(nums, 0, len - 1);        rot(nums, 0, k - 1);        rot(nums, k, len - 1);    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源文件与对话框</title>
      <link href="/posts/3f7e116a.html"/>
      <url>/posts/3f7e116a.html</url>
      
        <content type="html"><![CDATA[<p>首先介绍一下资源文件添加的方法：</p><ul><li>将图片文件 拷贝到项目位置下</li><li>右键项目-&gt;添加新文件 –&gt; Qt - &gt; Qt recourse File  - &gt;给资源文件起名</li><li>res 生成 res.qrc </li><li>open in editor 编辑资源</li><li>添加前缀 添加文件</li><li>使用 “ : + 前缀名 + 文件名 ”</li></ul><p>如何使用图片资源呢？举一个例子，给一个按钮来添加上图片的方法：</p><pre class="line-numbers language-c++"><code class="language-c++">ui->actiondaikai->setIcon(QIcon(":/Image/Luffy.png"));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>介绍一下另一个对话框类：Qdialog</p><pre class="line-numbers language-c++"><code class="language-c++">#include "mainwindow.h"#include "ui_mainwindow.h"#include <QDialog>#include <QDebug>#include <QMessageBox>#include <QColorDialog>#include <QFileDialog>#include <QFontDialog>MainWindow::MainWindow(QWidget *parent) :    QMainWindow(parent),    ui(new Ui::MainWindow){    ui->setupUi(this);    //点击新建按钮 弹出一个对话框    connect(ui->actionNew,&QAction::triggered,[=](){        //对话框 分类        //模态对话框 （不可以对其他窗口进行操作） 非模态对话框 （可以对其他窗口进行操作）        //模态创建 阻塞        //QDialog dlg(this);        //dlg.resize(200,100);        //dlg.exec();        //qDebug() << "模态对话框弹出了";        //非模态对话框         // QDialog * dlg2 = new QDialog (this);//这里放在堆中是为了防止被释放呀而一闪而过         // dlg2->resize(200,100);         // dlg2->show();         // dlg2->setAttribute(Qt::WA_DeleteOnClose); //55号 属性这个函数的作用是我直接关闭对话框我就可以把内存释放掉         // qDebug() << "非模态对话框弹出了";        //消息对话框        //错误对话框        //QMessageBox::critical(this,"critical","错误");        //信息对话框        //QMessageBox::information(this,"info","信息");        //提问对话框        //参数1  父亲  参数2  标题  参数3  提示内容  参数4 按键类型  参数5 默认关联回车按键//        if (QMessageBox::Save  ==  QMessageBox::question(this,"ques","提问",QMessageBox::Save|QMessageBox::Cancel,QMessageBox::Cancel))//        {//            qDebug() << "选择的是保存";//        }//        else//        {//            qDebug() << "选择的是取消";//        }//这是一个提问对话框，能够改变提问两边的东西        //警告对话框        //QMessageBox::warning(this,"warning","警告");        //其他标准对话框        //颜色对话框        //QColor color =  QColorDialog::getColor(QColor(255,0,0));        //qDebug() << "r = " << color.red() << " g = " << color.green() << " b  = " << color.blue() ;        //文件对话框  参数 1  父亲  参数2  标题   参数3  默认打开路径  参数4  过滤文件格式        //返回值是 选取的路径        // QString str = QFileDialog::getOpenFileName(this,"打开文件","C:\\Windows","(*.txt)");//         qDebug() << str;         //字体对话框        bool flag;        QFont font = QFontDialog::getFont(&flag,QFont("华文彩云",36));        qDebug() << "字体：" << font.family().toUtf8().data() << " 字号 "<< font.pointSize() << " 是否加粗"<< font.bold() << " 是否倾斜"<<font.italic();    });    connect(ui->actionstart,&QAction::triggered,[=](){        QMessageBox::critical(this,"critical","错误");         });}MainWindow::~MainWindow(){    delete ui;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode547</title>
      <link href="/posts/3ae86d6e.html"/>
      <url>/posts/3ae86d6e.html</url>
      
        <content type="html"><![CDATA[<pre><code>有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。返回矩阵中 省份 的数量来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/number-of-provinces著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><p>这个题的思路很简单啊，就是求一个图中的联通分量的数目呀。直接用深度遍历的方法就行了呀。首先要有一个visit的数组统一设置成0，访问到了就设置成1，从任何一个点开始做深度遍历，把深度遍历放大一个更大的循环中，进而找出联通分量的数目。至于深度遍历，肯定是直接用递归来实现。访问一个点后，对其他临街的点继续执行深度遍历，直到所有都被访问为止。</p><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>#include<vector>using namespace std;class Solution {public:    void dfs(vector<vector<int>>& isConnected,vector<int>&vist,int k,int len)    {        vist[k] = 1;        for (int i = 0; i < len; i++)        {            if (isConnected[k][i] && !vist[i])            {                dfs(isConnected, vist, i,len);            }        }    }    int findCircleNum(vector<vector<int>>& isConnected) {        int len = isConnected.size();        vector<int>vist(len);        int cout = 0;        for (int i = 0; i < len; i++)        {            if (vist[i] == 0)            {                cout++;            }            dfs(isConnected,vist,i,len);        }        return cout;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mainwindow</title>
      <link href="/posts/a280a607.html"/>
      <url>/posts/a280a607.html</url>
      
        <content type="html"><![CDATA[<p>mainwindow来建立大致的软件模型框架</p><pre class="line-numbers language-c++"><code class="language-c++">#include "mainwindow.h"#include <QMenuBar>#include <QToolBar>#include <QDebug>#include <QPushButton>#include <QStatusBar>#include <QLabel>#include <QDockWidget>#include <QTextEdit>MainWindow::MainWindow(QWidget *parent)    : QMainWindow(parent){    //重置窗口大小    resize(600,400);    //菜单栏  只能最多有一个    //菜单栏创建    QMenuBar * bar = menuBar();    //将菜单栏放入到窗口中    setMenuBar(bar);    //创建菜单，这两个就是左上角的文件和编辑啊    QMenu * fileMenu = bar->addMenu("文件");    QMenu * editMenu = bar->addMenu("编辑");    //创建菜单项    QAction * newAction = fileMenu->addAction("新建");    //添加分割线    fileMenu->addSeparator();    QAction * openAction = fileMenu->addAction("打开");    //可以看出来，菜单栏只是两个变量而已，首先是表头QMenu，其次是他的孩子，QAction变量    QAction *rewrite=editMenu->addAction("重写");    //工具栏  可以有多个    QToolBar * toolBar = new QToolBar(this);    addToolBar(Qt::RightToolBarArea,toolBar);    //后期设置 只允许 左右停靠    toolBar->setAllowedAreas( Qt::LeftToolBarArea | Qt::RightToolBarArea );    //设置浮动    toolBar->setFloatable(false);    //设置移动 (总开关)    toolBar->setMovable(true);    //工具栏中可以设置内容    toolBar->addAction("ps");    //添加分割线    toolBar->addSeparator();    toolBar->addAction("ae");    //工具栏中添加控件,也就是增加了一个按钮选项啊，是不是开发过程中这个应该是更管用的    QPushButton * btn = new QPushButton("aa" , this);    toolBar->addWidget(btn);    //状态栏 最多有一个    QStatusBar * stBar = statusBar();//状态栏的建立方法和菜单栏是一样的哈    //设置到窗口中    setStatusBar(stBar);    //放标签控件，相比与前面的QPushbutton，这个是QLable呀    QLabel * label = new QLabel("提示信息wfp",this);    stBar->addWidget(label);    //QLabel * label2 = new QLabel("右侧提示信息",this);    //stBar->addPermanentWidget(label2);    //铆接部件 （浮动窗口） 可以有多个    QDockWidget * dockWidget = new QDockWidget("浮动",this);    addDockWidget(Qt::BottomDockWidgetArea,dockWidget);    //设置后期停靠区域，只允许上下    dockWidget->setAllowedAreas( Qt::TopDockWidgetArea | Qt::BottomDockWidgetArea );    //设置中心部件 只能一个    QTextEdit * edit = new QTextEdit(this);    setCentralWidget(edit);}MainWindow::~MainWindow(){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt信号和槽机制</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<p>继续前天的qt学习吧，先来看看几个文件：</p><pre class="line-numbers language-c++"><code class="language-c++">widget.h#ifndef WIDGET_H#define WIDGET_H#include <QWidget>#include "teacher.h"#include "student.h"namespace Ui {class Widget;}class Widget : public QWidget{    Q_OBJECTpublic:    explicit Widget(QWidget *parent = 0);    ~Widget();private:    Ui::Widget *ui;    Teacher * zt;    Student * st;    void classIsOver();};#endif // WIDGET_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">widget.cpp#include "widget.h"#include "ui_widget.h"#include <QPushButton>#include <QDebug>//Teacher 类  老师类//Student 类  学生类//下课后 ，老师会触发一个信号，饿了 ，学生响应信号，请客吃饭void func(){    qDebug() <<"aaa";}Widget::Widget(QWidget *parent) :    QWidget(parent),    ui(new Ui::Widget){    ui->setupUi(this);    //创建一个老师对象    this->zt = new Teacher(this);    //创建一个学生对象    this->st = new Student(this);//    //老师饿了 学生请客的连接//    connect(zt,&Teacher::hungry,st,&Student::treat);//    //调用下课函数//    classIsOver();    //连接带参数的 信号和槽    //指针 -> 地址    // 函数指针 -> 函数地址    void(Teacher:: *teacherSignal)(QString  ) = &Teacher::hungry;    void(Student:: *studentSlot)(QString  )  = &Student::treat;    connect(zt,teacherSignal,st,studentSlot);        //从这里看的话，这是定义了一个参数为QString的函数的指针，这样的方式就区分出来了，其实这个写法我以前是没有见过的   // classIsOver();    //点击一个 下课的按钮 ，再触发下课    QPushButton * btn = new QPushButton("下课",this);    //重置窗口大小    this->resize(600,400);    //点击按钮 触发下课通过按钮来触发class over的函数    //connect(btn,&QPushButton::clicked,this,&Widget::classIsOver);    //无参信号和槽连接    void(Teacher:: *teacherSignal2)(void) = &Teacher::hungry;    void(Student:: *studentSlot2)(void)  = &Student::treat;    //connect(zt,teacherSignal2,st,studentSlot2);    //信号连接信号    connect(btn,&QPushButton::clicked, zt, teacherSignal2);    //断开信号    //disconnect(zt,teacherSignal2,st,studentSlot2);    //拓展    //1、信号是可以连接信号    //2、一个信号可以连接多个槽函数    //3、多个信号 可以连接 同一个槽函数    //4、信号和槽函数的参数 必须类型一一对应    //5、信号和槽的参数个数  是不是要一致？信号的参数个数 可以多余槽函数的参数个数    //Qt4版本以前的信号和槽连接方式    //利用Qt4信号槽 连接无参版本    //Qt4版本 底层SIGNAL("hungry")  SLOT( "treat")    connect(zt,SIGNAL(hungry()) , st , SLOT(treat()));    //Qt4版本优点：参数直观，缺点 ：类型不做检测    //Qt5以上  支持 Qt4的版本写法，反之不支持//    QPushButton * btn2 = new QPushButton;//    [btn](){//        btn->setText("aaaa");//        btn2->setText("bbb"); //btn2看不到//    }();    // mutable关键字 用于修饰值传递的变量，修改的是拷贝，而不是本体//    QPushButton * myBtn = new QPushButton (this);//    QPushButton * myBtn2 = new QPushButton (this);//    myBtn2->move(100,100);//    int m = 10;//    connect(myBtn,&QPushButton::clicked,this,[m] ()mutable { m = 100 + 10; qDebug() << m; });//    connect(myBtn2,&QPushButton::clicked,this,[=] ()  { qDebug() << m; });//    qDebug() << m;//    int ret = []()->int{return 1000;}();//    qDebug() << "ret = " << ret ;    //利用lambda表达式 实现点击按钮 关闭窗口    QPushButton * btn2 = new QPushButton ;    btn2->setText("关闭");    btn2->move(100,0);    btn2->setParent(this);        //下面的这一步lambda表达式[=]表示能够引用范围内的可见的局部变量，其中本来的槽函数是可以省略的。        connect(btn2,&QPushButton::clicked, [=](){//我感觉这样省了去写一个classover的这个函数，直接用这种方法来直接发送信号多好呀，哈哈哈//        this->close();//        emit zt->hungry("宫保鸡丁");        btn2->setText("aaaa");    });    //lambda表达式 最常用  [=](){}}void Widget::classIsOver(){    //下课函数，调用后 触发老师饿了的信号    //emit zt->hungry();    emit zt->hungry("宫保鸡丁");//因为classover是属于widget类中的函数，所以定义的时候是单独拿出来定义的啊，这里是满足了槽函数和信号函数的参数变量是一样的，所以才能够传递的原理啊}Widget::~Widget(){    delete ui;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看一下写的两个类函数：student和teacher：</p><pre class="line-numbers language-c++"><code class="language-c++">student.h#ifndef STUDENT_H#define STUDENT_H#include <QObject>class Student : public QObject{    Q_OBJECTpublic:    explicit Student(QObject *parent = 0);signals:public slots:    //早期Qt版本 必须要写到public slots，高级版本可以写到 public或者全局下    //返回值 void ，需要声明，也需要实现    //可以有参数，可以发生重载    void  treat();    void  treat(QString foodName);};#endif // STUDENT_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">student.cpp#include "student.h"#include <QDebug>Student::Student(QObject *parent) : QObject(parent){}void Student::treat(){    qDebug()<< "请老师吃饭";}void Student::treat(QString foodName){    //QString -> char * 先转成 QByteArray  ( .toUtf8() ) 再转char * ( .data() )    qDebug() << "请老师吃饭，老师要吃:" << foodName.toUtf8().data() ;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">teacher.h#ifndef TEACHER_H#define TEACHER_H#include <QObject>class Teacher : public QObject{    Q_OBJECTpublic:    explicit Teacher(QObject *parent = 0);signals:    //自定义信号  写到signals下    //返回值是void ，只需要声明，不需要实现    //可以有参数，可以重载    void hungry();    void hungry(QString foodName);public slots:};#endif // TEACHER_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>teacher.cpp#include "teacher.h"Teacher::Teacher(QObject *parent) : QObject(parent){}//其实从这里就可以发现，我只需要声明一下这个函数，这个函数不需要做任何事情</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="E:%5Ctt%5Csource%5C_posts%5C2021-1-6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5CQt%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD%20.png" alt="Qt信号和槽 "></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode399除法求值</title>
      <link href="/posts/56ddf307.html"/>
      <url>/posts/56ddf307.html</url>
      
        <content type="html"><![CDATA[<pre><code>给你一个变量对数组 equations 和一个实数值数组 values 作为已知条件，其中 equations[i] = [Ai, Bi] 和 values[i] 共同表示等式 Ai / Bi = values[i] 。每个 Ai 或 Bi 是一个表示单个变量的字符串。另有一些以数组 queries 表示的问题，其中 queries[j] = [Cj, Dj] 表示第 j 个问题，请你根据已知条件找出 Cj / Dj = ? 的结果作为答案。返回 所有问题的答案 。如果存在某个无法确定的答案，则用 -1.0 替代这个答案。注意：输入总是有效的。你可以假设除法运算中不会出现除数为 0 的情况，且不存在任何矛盾的结果。示例 1：输入：equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]输出：[6.00000,0.50000,-1.00000,1.00000,-1.00000]解释：条件：a / b = 2.0, b / c = 3.0问题：a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?结果：[6.0, 0.5, -1.0, 1.0, -1.0 ]示例 2：输入：equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]输出：[3.75000,0.40000,5.00000,0.20000]示例 3：输入：equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]输出：[0.50000,2.00000,-1.00000,-1.00000]来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/evaluate-division著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><p>这个题我没有做出来，看了答案，思路：</p><ol><li>利用map表将string类型与图的索引结合一起，为创建图做准备</li><li>建立图，这里建立的是vector&lt;vector&lt;pair&lt;&gt;&gt;类型的图，这里利用find和for in，打破了以前必须利用i的禁锢</li><li>利用广度遍历</li></ol><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>#include<unordered_map>#include<vector>#include<string>#include<queue>using namespace std;class Solution {public:    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {        int nvars = 0;        unordered_map<string, int> variables;        int n = equations.size();        for (int i = 0; i < n; i++) {            if (variables.find(equations[i][0]) == variables.end()) {                variables[equations[i][0]] = nvars++;            }            if (variables.find(equations[i][1]) == variables.end()) {                variables[equations[i][1]] = nvars++;            }        }//这一步的目的是把string串与图的下标对应起来        // 对于每个点，存储其直接连接到的所有点及对应的权值        vector<vector<pair<int, double>>> edges(nvars);        //两个vector创建出一个图，pair写出权值，很厉害的        for (int i = 0; i < n; i++) {            int va = variables[equations[i][0]], vb = variables[equations[i][1]];            edges[va].push_back(make_pair(vb, values[i]));            edges[vb].push_back(make_pair(va, 1.0 / values[i]));        }        vector<double> ret;        for (const auto& q : queries) {            double result = -1.0;            if (variables.find(q[0]) != variables.end() && variables.find(q[1]) != variables.end()) {                int ia = variables[q[0]], ib = variables[q[1]];//人家这个散列表用的真的狠                if (ia == ib) {                    result = 1.0;                }                else {//开始遍历图了呀，这里用广度遍历，之所以不选择prime是因为没有必要求到每一个点的                    queue<int> points;                    points.push(ia);                    vector<double> ratios(nvars, -1.0);                    ratios[ia] = 1.0;                    while (!points.empty() && ratios[ib] < 0) {                        int x = points.front();                        points.pop();                        for (const auto tmp : edges[x]) {                            if (ratios[tmp.first] < 0) {                                ratios[tmp.first] = ratios[x] * tmp.second;                                points.push(tmp.first);                            }                        }                    }                    result = ratios[ib];                }            }            ret.push_back(result);        }        return ret;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我有个骑行的计划</title>
      <link href="/posts/ec1b1c50.html"/>
      <url>/posts/ec1b1c50.html</url>
      
        <content type="html"><![CDATA[<p>本来在去年的时候，我曾经幻想过，如果我能成功，我要从武汉出发，来一场骑行，10天的时间，我就可以去深圳了，可如今，考完研，对完答案，我好想哭。。。。我明明复习的非常不错了，可是，我在考场上的时候却像是一个傻子，我什么都做不到，我真的是一个笨蛋啊。本来答应了那么多人，我会去看他们，我又一次的把那些话一个人咽进了自己的肚子里。</p><p>多想，多想有一天这些事能够实现，也算是为我的青春留下一个交代，多想啊。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 好望角 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1月4日学习笔记</title>
      <link href="/posts/cec82287.html"/>
      <url>/posts/cec82287.html</url>
      
        <content type="html"><![CDATA[<h1 id="1月4号，考完研后的一周"><a href="#1月4号，考完研后的一周" class="headerlink" title="1月4号，考完研后的一周"></a>1月4号，考完研后的一周</h1><p>​      考完研后，调整了一下状态，也在思考原因，休整了几天之后，决定鼓起勇气面对后面的事情，做一个好一点的计划，于是2021年1月4号开始了正式的学习了。今天看的git的应用与qt的界面开发的部分，其实我也在思考我学习过程中的缺点，我可能真的是仅仅喜欢新的东西，而不懂得及时的回顾，每当回顾的时候，我就喜欢拖延，最后的结果就是学完了也就忘了，这可能就是我的缺点吧。</p><hr><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>GIT相当于一个做版本控制的软件，挺高级的。今天学习了最基础的命令。</p><ol><li>在需要管理的文件夹内打开git bash，而后初始化操作：git init </li><li>查看文件夹中的文件状态:git status ,新建立的和修改过的都是红色的，其实这里是深究了还挺复杂的，以后讨论。</li><li>添加文件到管理（把红色变成绿色）git add .</li><li>生成需要的版本：git commit -m’版本名’</li><li>查看版本记录：git log</li></ol><p>上面就是git最基本的操作了，结合实际工作考虑特殊情况。</p><p>我在之前s的版本添加代码，写成一个新的版本，但是，如果我想退回原来的版本如何做？<strong>回滚</strong></p><ul><li><p>回滚到之前的版本</p><pre class="line-numbers language-c++"><code class="language-c++">git loggit reset --hard 版本号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>回滚到之后的版本</p><pre><code>git refloggit reset --hard 版本号</code></pre></li></ul><p>其实git最厉害的一个东西在于分支，下面结合案例说一下分支，为什么引用分支呢？看如下场景，我在写新的模块，但是我之前的模块出了bug，想要修复，这时我如果退回去，那么我新写的就没有了。所以，bug和dev其实都是用的分支，分支完了再进行合并。至于那个合并之后把之前的删掉是怎么回事？？</p><ol><li><p>创造分支：git branch name</p></li><li><p>切换分支：git checkout name</p></li><li><p>git merge name(这里要注意一件事，所有的合并，其实本体都是master的)（合并后的内容是可以把之前的分支给删除掉的，是因为合并的版本已经有了分支的内容吧）</p></li><li><p>删除分支：git branch -d name</p><hr><h2 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h2><h3 id="WIDGET类"><a href="#WIDGET类" class="headerlink" title="WIDGET类"></a>WIDGET类</h3><p>之后看了qt最简单的一些东西，qt建立的基于widget类建立h和cpp，除此之外就是main函数了。main函数中两个变量，Qapplication和widget，其中前者唯一，我们的主要操作主要基于后者。基于widget的类添加各种各样的新类。关于新类是如何构造的，关于那个parent我是有点不太懂的。</p><p>widget中的几个函数resize，setwindowtitle，setfixedsize</p><p>QPushbutton按钮类setparent（this）：这一步其实就把按钮一块给放到widget上了；settext按钮的名字；move移动位置</p><h3 id="信号和槽机制"><a href="#信号和槽机制" class="headerlink" title="信号和槽机制"></a>信号和槽机制</h3><p>signal和spot，其中信号的函数只要声明就行了，它不需要做出任何动作，槽函数来负责具体动作。二者通过connect来连接。</p><p>系统的信号，感觉主要就是一些click点击之类的，比方说点击一个按钮，就关闭窗口这类connect</p><pre><code>connect（变量，信号，变量，槽函数）connect（btn,&amp;QPushButton::clicked,this,&amp;Mywidget::close）;//系统类的</code></pre><p>关于自定义的函数重载我还是不太懂。</p><p>connect函数要写在调用函数之前，调用函数中的发送信号的函数这样写： emit 自定义信号</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode每日一题830</title>
      <link href="/posts/a6f5b56e.html"/>
      <url>/posts/a6f5b56e.html</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode每日一题830"><a href="#leetcode每日一题830" class="headerlink" title="leetcode每日一题830"></a>leetcode每日一题830</h1><pre><code>在一个由小写字母构成的字符串 s 中，包含由一些连续的相同字符所构成的分组。例如，在字符串 s = "abbxxxxzyy" 中，就含有 "a", "bb", "xxxx", "z" 和 "yy" 这样的一些分组。分组可以用区间 [start, end] 表示，其中 start 和 end 分别表示该分组的起始和终止位置的下标。上例中的 "xxxx" 分组用区间表示为 [3,6] 。我们称所有包含大于或等于三个连续字符的分组为 较大分组 。找到每一个 较大分组 的区间，按起始位置下标递增顺序排序后，返回结果。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/positions-of-large-groups著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。、</code></pre><p>个人的解法：单纯利用两个指针，很简单的思路。</p><pre><code>#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;string&gt;using namespace std;//我拿到这个题的第一个思路就是设置出两个指针，将两个坐标的差与三来比较，进而寻找出这个字符串class Solution {public:    vector&lt;vector&lt;int&gt;&gt; largeGroupPositions(string s) {        int i = 0, j = 1;        vector&lt;vector&lt;int&gt;&gt;result;        while (j&lt; s.length())        {            vector&lt;int&gt;tmp;            if (s[i] == s[j])            {                j++;            }            else             {                if (j - i &gt; 2)                {                    tmp.push_back(i);                    tmp.push_back(j-1);                    result.push_back(tmp);                }                i = j;                j++;            }        }        if (j - i &gt; 2 &amp;&amp;s[i]==s[j-1])        {            vector&lt;int&gt;tmp;            tmp.push_back(i);            tmp.push_back(j - 1);            result.push_back(tmp);        }        return result;    }};</code></pre><p>同样的思路，别人写的代码，哎，写的也比我好太多了。</p><pre><code>通过两个指针指向窗口的首端和尾端。通过尾端的不断确定相同元素，进行窗口尾端向右移动。如果尾端元素与首端元素不同，则说明达到窗口的最大值，则查看窗口内元素是否达到3，如果达到3则记录。最后将窗口首端直接移动到与尾端相同位置(有KMP记忆的思想)。当两个指针都达到末端则结束。作者：chong-xi链接：https://leetcode-cn.com/problems/positions-of-large-groups/solution/hua-dong-chuang-kou-jie-fa-han-kmpsi-xia-qgcv/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。class Solution {public:    vector&lt;vector&lt;int&gt;&gt; largeGroupPositions(string s) {        int prev = 0;        int last = 0;        vector&lt;vector&lt;int&gt;&gt; res;        while (s[last]||s[prev]){           //s[end] = '\0' 为false            if (s[prev]==s[last]) last++;            else {                if ((last-prev-1)&gt;=2){                    res.push_back({prev,last-1});                }                prev = last;            }        }        return res;    }};</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 不周山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志随笔2020.10.17</title>
      <link href="/posts/19er124.html"/>
      <url>/posts/19er124.html</url>
      
        <content type="html"><![CDATA[<p>10月也已经过了大半了，今天其实整体感觉也还好，就是要这样一点点的进入状态，稍等，我先去烧水泡个脚。</p><p>决定先不看哔哩哔哩了，攒好一切来冲刺考研，不能被别的事情来分心呢。这一点也挺重要的。要按照每一科来复习，否则学着学者就忘了。看看IT之家，看看漫画都行，但有一点，不刷视频。浪费时间，全心全意的来复习。</p><p>今天想起一些失去了的朋友，自己做了一段rap的词，打算把这个做成歌，叫什么呢？</p><p>就叫做，我的朋友吧。嗯，也不错，希望能做出优秀的作品吧。</p><p>争分多秒的过程也得让自己平和下来，不能操之过急。明天有项目要搞，公司的活，怪烦的，不过也得做。保持效率，保持效率。从新启动之前的学习方法，应该更适合我。明天加油！@wfp</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 燕子集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志随笔2020.10.14</title>
      <link href="/posts/19d2124.html"/>
      <url>/posts/19d2124.html</url>
      
        <content type="html"><![CDATA[<p>日子一天天的过，学会成熟，学会去说谎话，学着不再跟人分享喜悦，学会不被道德绑架。</p><p>这几天有点隐隐的健身坚持不住的感觉，或许是到了饮食的瓶颈期了吧，到拼多多上一会在买一些营养品补一补吧。</p><p>想起自己新改的那个签名，一走，我不送，你来，我雨里相迎。</p><p>可能别人看来我就是个冷酷无情的人吧，我不在乎失去身边的任何人，因为我明白，他们都只陪我走一段路程的人，过段时间，他们与我，也就什么都不是了，这就是我的价值观，我也在用我的价值观去审视着身边的人，也许，人与人之间最好的关系，真的只出现在小时候吧，我给一点吃的，你就是我的朋友，在我需要帮助你挺身而出，你就是我的兄弟，现在，真的呵呵，再好的关系都会一触即破。有多少兄弟都是最后老死不相往来，呵。我真的不在看重这些东西了，你有才能，有本事，谁都来巴结你，哎，就是这么残酷，也不想再说了。</p><p>还是打算明天开始分类复习，一天看一门，感觉时间走的飞快，没有留下什么，明天，继续努力吧，早起背英语，不要在乎现实，不要在乎别人怎么看你，不要去在乎成功还是失败，记住，你就是自己的英雄，你的喜怒哀乐也是自己的，他人，休得再占取分毫。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 燕子集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志随笔2020.10.13</title>
      <link href="/posts/19d2334.html"/>
      <url>/posts/19d2334.html</url>
      
        <content type="html"><![CDATA[<p>距离考研还有74天，用了两天的时间，终于将政治的题全部整理完毕了，感觉自己也是挺神速的。不过还是觉得一个人复习的效率不是很高。打算明天利用好番茄钟，试一下，我一天能学几个25分钟，从而建立一套真正意义上的有效率的学习方法。</p><p>今天健身房来了一个小哥，人也挺帅的，我邀请他一起练，我说平时就我一个人练，那几个妹子只打桌球，我练的都想放弃了。他看看我，说，大哥，你练的挺好，要指导我啊。我：？？哎，我这种没入门的人，在别人的眼里估计也还挺厉害的，哈哈。</p><p>今天看了看网易云音乐人收入，收入为0，哎，只有一首自由之路的播放量还可以，那首Y还被一个女生给嘲笑了。…..这种日子到底还要多久，我什么时候才能成为说唱歌手？我发四，以后所有歌都不会唱hook，唱就打死。</p><p>我觉得咸鱼的虚拟商品真的可以开发一下，在咸鱼买了一份资料，反手又挂在自己主页，两天赚了30多。很想研究研究自动发货的脚本，用咸鱼卖虚拟商品，在虚拟版权还没有完善的时候，一定是没有问题的。</p><p>早点休息，睡觉前涂点美白精华，喝杯牛奶，明天又是精致的生活，night！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 燕子集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志随笔2020.10.12</title>
      <link href="/posts/19d2a4e7.html"/>
      <url>/posts/19d2a4e7.html</url>
      
        <content type="html"><![CDATA[<p>距离考研还有75天，我拿起了政治书，是的，真的开始复习政治了。相比之前，这次的复习速度要快上很多，今天看了一整天，估计明天再看一天，应该可以把政治一轮给拿下吧。还是应该把时间留给数学跟英语，毕竟都考了那么多次了，还是一点长进没有。</p><p>今天开始，青岛出了9个无症状感染，也是挺慌了的吧，我有点担心，如果考研的时候，也是疫情爆发的期间，该怎么办呢？恍恍惚惚，才发现，已经一年了，到了该冲刺的日子了。</p><p>还是一如既往的去健身房，跟他们偶尔聊聊天，说来惭愧，目前练的满意的，也就是胸了，还记得高中特别有意思的事情，当时体检，我看一个妹子的体检单，一脸惊讶的对她说，我去，你那么瘦，为什么胸围比我大，我记得没错的话，当时数据应该是82。她满脸通红，过了好久我才反应过来。现在想来，怪有意思的，可能，对一个有好感的人的记忆，总是很难忘记，偶然想起，心中温暖的感觉，大致就是这样吧。只是如今物是人非，想来还有点惆怅，感慨青春真好。</p><p>加油吧，75天。为了梦又瘦了十斤，为了坚持这份执心，为了赢我得再使劲，为了痛不得不放下，为了变得体的代价。你不得不理解的这份沉重。记得三年前，我站在台上，说我不怕，现实多奸诈，我要带你们去见证我所书写的荣耀。我的天啊，你当时到底打了些什么仗，除了爱你的人，其他人都觉得你太可悲。上天夺走了我的翅膀，要我经历这人间的沧桑迷茫，可我本就来自天上，必然要再回到天上，而这一路，已经没人配与我共享，在孤独中保持自信，就是这种感觉吧，晚安啊！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 燕子集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这一次，从hexo开始</title>
      <link href="/posts/eb6ebd37.html"/>
      <url>/posts/eb6ebd37.html</url>
      
        <content type="html"><![CDATA[<p>今天是十月11号凌晨两点，从10月4号开始部署自己的博客，也快有一个周了吧。我才发现，我已经有好多年不熬夜了，5号那天，我熬了一宿，猛然看窗户，已经大亮我仔细的去想，上一次熬夜是什么时候呢，我想起来了，是第一次做公众号的时候吧。</p><p>我在内心确定，我是适合做技术的，我一旦钻进去一个东西，有瘾的。这种感觉，让我不会产生疲惫感。我喜欢把东西做出来那一瞬间的成就感，我知道，这是属于我的。</p><p>matery的主题模板，陆陆续续改了一些东西，添加了相册，添加了我的网易云音乐，我把哔哩哔哩的视频也都放上去了，我觉得一个博客就像是一个人的标签，一个仓库，他代表了你一路走来，所拥有的东西，所学会的东西，看到这些东西让我觉的我的生活是有意义的。</p><p>之前学过一点前端，做了这次的博客，我觉得web的网站开发，真的可以多试一试的，有意思，我打算在以后慢慢的学习web，就利用平时休息的时间，应该也会慢慢一点一点的积累吧。</p><p>今天先到这吧，实在是太困了，我的文字就像流水账，写不动，脑袋装不了太多东西了。</p><p>我在想，我把这类文章分到什么标签。啊，我的目标是，成为终生 学习者，不断向大佬们学习！！，终生学习，是我的第二个标签。</p><p>晚安，明天要更努力，你能成为你想要成为的人！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 通天塔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020.10.1日志随笔</title>
      <link href="/posts/e3e08109.html"/>
      <url>/posts/e3e08109.html</url>
      
        <content type="html"><![CDATA[<p>又到十月一，突然发现这一年过的真的快，一转眼就结束了的那种。这大半年到底经历了什么呢？让时间过的这么快。</p><p>呵呵，我这半年总在立flag与打破flag中不断的循环与挣扎，从最开始的复试就这样，拖延加定制的任务不能够完成，然后再去不断的自责，并树立最新的flag：</p><p>每天用番茄闹钟打卡，每天用xmind记录日记，不去看斗鱼温柔的视频，不去看污污的韩漫。</p><p>我总是间接性的热血，持续的混吃等死，我似乎有时候觉得，这就是我的常态了。我如果没什么出息，也就一辈子这样了吧。</p><p>可我总要改变，因为我不想亲手毁掉当初意气风发的选择，去向这个世界证明我当初的决定都是错的，我需要拿出成绩，给我自己一个交代，我不想永远看着别人的朋友圈去难过，去一个人孤独，我不想拿着5000块钱的工资老去，我还想找一个喜欢的女朋友。</p><p>我需要沉下心来，把这几年的挫折当成财富，我需要成为一个拥有自制力，成为一个言出必行的人。让自己说的话又分量，成为一个让我自己佩服的人。千淘万漉虽辛苦，吹尽狂沙使到金。</p><p>自制力，在我没有一个很好的环境下，在闹市，我能成为成为一个拥有定力的人，那才是我最想能够做到的人吧。无数次的从明天开始，今天，我真的，不想在拥有明天这种说辞了，我想今天改变了，凤鹏，你能不能做到呢。</p><p>这决定了你到底能不能考研成功呢。我总是在意，我在意以前的朋友在我落魄的时候，还能不能想起我，呵！这种想法怎么这么幼稚呢，我在一次次的失落中，真真正正的感受到了，你的社交圈，仅仅是取决于你的实力，别再把注压到朋友的身上了，这一次，我压到自己的身上。</p><p>不要让无休止的时间，磨灭了你作为一个梦想者该有的执着，加油啊。我的朋友。不再下载哔哩哔哩看东西了，把自己的社区，集中到leetcode与csdn上吧，强迫自己去热爱梦想，不再看斗鱼了。</p><p>不再去接触那些让人玩物丧志的东西了。我只有这一次机会了吧，哈哈哈。我妈妈说我十一能转运，让我在家里好好呆着，我相信命运，我更相信我的妈妈。还记得三年前，三年前，你在北京留下的誓言嘛，我知道，那些吹过的牛逼，已经没有办法再去实现了，很遗憾，但是，我可以的，我一定可以的，去继续书写我的荣耀。 </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 燕子集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人海人山</title>
      <link href="/posts/19d2a4e6.html"/>
      <url>/posts/19d2a4e6.html</url>
      
        <content type="html"><![CDATA[<p>最近的复习状态一直不是很好，我在尝试各种方法去解决，但是收到的效果甚微。我还是忍不住的打开朋友圈去翻朋友们的动态，去看他们在过什么样的生活，去了工大的，去了交大的的，甚至是去了部队的。</p><p>我并不是羡慕他们的生活，我今年也是有点浮躁，第一年的考研经历，我是从中吸取了教训了的。那年的我更浮躁，我能够去解决的，那已经不再是什么不可战胜的洪水猛兽了。可是如今的我，不光是浮躁了，我感觉压抑的很，黑暗中扑面的孤独感，在宁静的夜的某个瞬间，让我窒息。我一直觉得我是一个独来独往的人，我喜欢一个人，我不喜欢等人，他们都太笨了，他们的格局都太低了，只有我一个人的时候，我做事的时候才不用去将就别人，那是最游刃有余的我。</p><p> 可是，真的是这样嘛？为什么现在的我这么压抑，这么难受？是身边少了小马的鼓励，少了与傲神的侃侃而谈，少了小田在身边学习时的那一份从容？少了茂运和田金来问我题的时候的我解决之后那自信的嘴角？        我好想他们啊，他们在的时候，我才觉得那是考研吧！现在的我，没处去发泄，没法去自豪，没法去认可自己。我只能一个人去默默的学习，胜败只于我一个人，分享不了喜悦，也分享不了忧伤…….     </p><p>之前听过一首歌，叫《人海人山》：“誓要铁树开花结果江水东去不复返，陪着窗外大雨倾盆迎接清晨的那种无助感。”谁不是呢？幻想着一鸣惊人的闪光点，能够照耀着数千里的暗淡夜。在一次又一次的失意焦虑暴躁失望痛心绝境中不断死去然后重生。“困在瓶颈深处的艺术家，永远前进不回头，为了采摘彼岸的一束花，用尽了一生的回眸，走出丛林的菩提树，从此只有他和岸，永远不会在迷路，度与逐流的阿罗汉” </p><p>听到这句的时候，我有些怅然若失，从此只有他和岸这句话，是不是在告诉我，要想走到路的尽头，陪伴你的只有孤独呢？</p><p>  我去看大一大二时百度云里存的照片，那时我的眼神里面，真的有星辰大海，现在暗淡了很多。我知道我必须跳出现在的这个死循环。</p><p> 在平凡的日子中去寻找自己生活中的闪光点，这也是我开始想去做歌的原因，去寻找属于自己的认同感，去尝试取悦自己吧，去认可自己的价值。</p><p>身边的同事问我为什么三战去考研，因为我不想认输啊，哪怕触底都要去反弹，不断的去修炼自己，去飞过万丈深渊，并成为一个真正的男人！ </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 燕子集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>压抑的孤独</title>
      <link href="/posts/7a46f93c.html"/>
      <url>/posts/7a46f93c.html</url>
      
        <content type="html"><![CDATA[<p>或许打败我的</p><p>不是这几年的困难而是这最后一年的孤独</p><p>这一年的自我怀疑</p><p>你命中注定的孤独</p><p>命中注定的没人喜欢你没人爱你</p><p>是啊</p><p>这一切都是命中注定</p><p>那我现在在这里还有什么意义</p><p>心气，不服气，又都有什么意义</p><p>你也看到了啊</p><p>没人喜欢我他们都在讨厌我</p><p>是啊</p><p>他们为什么都讨厌我</p><p>讨厌我的傲慢</p><p>讨厌我那着急的情商</p><p>讨厌我的嘴脸</p><p>讨厌我的一切</p><p>你以为的关系都很脆弱</p><p>没人愿意在你跌倒的时候问候</p><p>你哪怕你站起来又如何</p><p>没人关心你的</p><p>我真的已经受不了了</p><p>我已经丢了我们这个词汇了</p><p>为了不被抛弃我只能变得更加的自私</p><p>做自己的观众</p><p>去听我创作的歌曲</p><p>欣赏我的肌肉</p><p>去一笔一画我那烂透了的书法</p><p>或许我这种人</p><p>不是不配别人的喜欢</p><p>而是，</p><p>不需要吧我很难受，</p><p>但只能这样</p><p>可我仍然希望有一天</p><p>有个人愿意为了我而喝彩而那个人，</p><p>不只是我的妈妈</p><p>如果有这么一个人</p><p>哪怕别人都不喜欢我</p><p>我都不怕</p><p>因为我本来就是偏执的，</p><p>就是倔强的，</p><p>就是高傲的可是，</p><p>我受不了这份没人认可的孤独</p><p>我需要一个人来理解我内心的孤独</p><p>在每一个孤独的夜晚</p><p>我多么想哭</p><p>我睡不着脑子里的画面</p><p>总是一直闪我难过，</p><p>什么都让我难过 </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 燕子集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研路 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
